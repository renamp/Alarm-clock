
Alarm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e88  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008e  00800060  00000e88  00000f1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000026b  008000ee  008000ee  00000faa  2**0
                  ALLOC
  3 .stab         000009fc  00000000  00000000  00000fac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002e1  00000000  00000000  000019a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00001c89  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000168  00000000  00000000  00001cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001b26  00000000  00000000  00001e20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000663  00000000  00000000  00003946  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000bbe  00000000  00000000  00003fa9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000384  00000000  00000000  00004b68  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003b2  00000000  00000000  00004eec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000e8a  00000000  00000000  0000529e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000170  00000000  00000000  00006128  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 e8       	ldi	r30, 0x88	; 136
  3a:	fe e0       	ldi	r31, 0x0E	; 14
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	ae 3e       	cpi	r26, 0xEE	; 238
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	23 e0       	ldi	r18, 0x03	; 3
  4a:	ae ee       	ldi	r26, 0xEE	; 238
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a9 35       	cpi	r26, 0x59	; 89
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	1f d2       	rcall	.+1086   	; 0x498 <main>
  5a:	14 c7       	rjmp	.+3624   	; 0xe84 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <setBackligth>:
uint8_t AlarmHor[99];
uint8_t AlarmDayDat[99];
uint8_t AlarmMon[99];

void setBackligth(uint8_t value){
	if( value ) setbit(PORTD, 5);
  5e:	88 23       	and	r24, r24
  60:	11 f0       	breq	.+4      	; 0x66 <setBackligth+0x8>
  62:	95 9a       	sbi	0x12, 5	; 18
  64:	08 95       	ret
	else clearbit(PORTD, 5);
  66:	95 98       	cbi	0x12, 5	; 18
  68:	08 95       	ret

0000006a <__vector_9>:
}


ISR( TIMER0_OVF_vect ){
  6a:	1f 92       	push	r1
  6c:	0f 92       	push	r0
  6e:	0f b6       	in	r0, 0x3f	; 63
  70:	0f 92       	push	r0
  72:	11 24       	eor	r1, r1
  74:	8f 93       	push	r24
  76:	9f 93       	push	r25
	TCNT0 = timer10ms;
  78:	83 e6       	ldi	r24, 0x63	; 99
  7a:	82 bf       	out	0x32, r24	; 50
	vtimer100ms--;
  7c:	80 91 60 00 	lds	r24, 0x0060
  80:	81 50       	subi	r24, 0x01	; 1
  82:	80 93 60 00 	sts	0x0060, r24
	
	////////////////////////////////////////////
	// each 10ms
	if( keysTimer ) keysTimer--;
  86:	90 91 62 01 	lds	r25, 0x0162
  8a:	99 23       	and	r25, r25
  8c:	19 f0       	breq	.+6      	; 0x94 <__vector_9+0x2a>
  8e:	91 50       	subi	r25, 0x01	; 1
  90:	90 93 62 01 	sts	0x0162, r25
	if( rtcTimer ) rtcTimer--;
  94:	90 91 c8 01 	lds	r25, 0x01C8
  98:	99 23       	and	r25, r25
  9a:	19 f0       	breq	.+6      	; 0xa2 <__vector_9+0x38>
  9c:	91 50       	subi	r25, 0x01	; 1
  9e:	90 93 c8 01 	sts	0x01C8, r25
	if( menuTimer ) menuTimer--;
  a2:	90 91 63 01 	lds	r25, 0x0163
  a6:	99 23       	and	r25, r25
  a8:	19 f0       	breq	.+6      	; 0xb0 <__vector_9+0x46>
  aa:	91 50       	subi	r25, 0x01	; 1
  ac:	90 93 63 01 	sts	0x0163, r25
	
	////////////////////////////////////////////
	// each 100ms
	if( vtimer100ms == 0 ){ vtimer100ms = 10;
  b0:	81 11       	cpse	r24, r1
  b2:	11 c0       	rjmp	.+34     	; 0xd6 <__vector_9+0x6c>
  b4:	8a e0       	ldi	r24, 0x0A	; 10
  b6:	80 93 60 00 	sts	0x0060, r24
		// tempo para backligth
		if(backlightTimer) backlightTimer--;
  ba:	80 91 2d 02 	lds	r24, 0x022D
  be:	88 23       	and	r24, r24
  c0:	19 f0       	breq	.+6      	; 0xc8 <__vector_9+0x5e>
  c2:	81 50       	subi	r24, 0x01	; 1
  c4:	80 93 2d 02 	sts	0x022D, r24
		if( blinktimer ) blinktimer--;
  c8:	80 91 ee 00 	lds	r24, 0x00EE
  cc:	88 23       	and	r24, r24
  ce:	19 f0       	breq	.+6      	; 0xd6 <__vector_9+0x6c>
  d0:	81 50       	subi	r24, 0x01	; 1
  d2:	80 93 ee 00 	sts	0x00EE, r24
	}
}
  d6:	9f 91       	pop	r25
  d8:	8f 91       	pop	r24
  da:	0f 90       	pop	r0
  dc:	0f be       	out	0x3f, r0	; 63
  de:	0f 90       	pop	r0
  e0:	1f 90       	pop	r1
  e2:	18 95       	reti

000000e4 <dfPlayer>:

void dfPlayer(uint8_t cmd, uint8_t param1, uint8_t param2 ){
  e4:	ff 92       	push	r15
  e6:	0f 93       	push	r16
  e8:	1f 93       	push	r17
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	f8 2e       	mov	r15, r24
  f0:	06 2f       	mov	r16, r22
  f2:	14 2f       	mov	r17, r20
	uint16_t crc = 0x105 + cmd + param1 + param2;
  f4:	c8 2f       	mov	r28, r24
  f6:	d0 e0       	ldi	r29, 0x00	; 0
  f8:	cb 5f       	subi	r28, 0xFB	; 251
  fa:	de 4f       	sbci	r29, 0xFE	; 254
  fc:	c6 0f       	add	r28, r22
  fe:	d1 1d       	adc	r29, r1
 100:	c4 0f       	add	r28, r20
 102:	d1 1d       	adc	r29, r1
	crc = (~crc)+1;
 104:	d1 95       	neg	r29
 106:	c1 95       	neg	r28
 108:	d1 09       	sbc	r29, r1
	
	UART_Write(0x7E);
 10a:	8e e7       	ldi	r24, 0x7E	; 126
 10c:	68 d6       	rcall	.+3280   	; 0xdde <UART_Write>
	UART_Write(0xFF);
 10e:	8f ef       	ldi	r24, 0xFF	; 255
 110:	66 d6       	rcall	.+3276   	; 0xdde <UART_Write>
	UART_Write(0x06);
 112:	86 e0       	ldi	r24, 0x06	; 6
 114:	64 d6       	rcall	.+3272   	; 0xdde <UART_Write>
	UART_Write(cmd);
 116:	8f 2d       	mov	r24, r15
 118:	62 d6       	rcall	.+3268   	; 0xdde <UART_Write>
	UART_Write(0x00);
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	60 d6       	rcall	.+3264   	; 0xdde <UART_Write>
	UART_Write(param1);
 11e:	80 2f       	mov	r24, r16
 120:	5e d6       	rcall	.+3260   	; 0xdde <UART_Write>
	UART_Write(param2);
 122:	81 2f       	mov	r24, r17
 124:	5c d6       	rcall	.+3256   	; 0xdde <UART_Write>
	UART_Write(crc>>8);
 126:	8d 2f       	mov	r24, r29
 128:	5a d6       	rcall	.+3252   	; 0xdde <UART_Write>
	UART_Write(crc);
 12a:	8c 2f       	mov	r24, r28
 12c:	58 d6       	rcall	.+3248   	; 0xdde <UART_Write>
	UART_Write(0xEF);
 12e:	8f ee       	ldi	r24, 0xEF	; 239
 130:	56 d6       	rcall	.+3244   	; 0xdde <UART_Write>
}
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	1f 91       	pop	r17
 138:	0f 91       	pop	r16
 13a:	ff 90       	pop	r15
 13c:	08 95       	ret

0000013e <dfPrintTime>:
void dfPrintTime(uint8_t *param){
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	ec 01       	movw	r28, r24
	lcdClean();
 144:	e7 d5       	rcall	.+3022   	; 0xd14 <lcdClean>
	lcdprintchar((param[2]>>4)	+ 0x30);	// hours
 146:	8a 81       	ldd	r24, Y+2	; 0x02
 148:	82 95       	swap	r24
 14a:	8f 70       	andi	r24, 0x0F	; 15
 14c:	80 5d       	subi	r24, 0xD0	; 208
 14e:	c3 d5       	rcall	.+2950   	; 0xcd6 <lcdprintchar>
	lcdprintchar((param[2]&0x0F)+ 0x30);	//
 150:	8a 81       	ldd	r24, Y+2	; 0x02
 152:	8f 70       	andi	r24, 0x0F	; 15
 154:	80 5d       	subi	r24, 0xD0	; 208
 156:	bf d5       	rcall	.+2942   	; 0xcd6 <lcdprintchar>
	lcdprintchar(':');
 158:	8a e3       	ldi	r24, 0x3A	; 58
 15a:	bd d5       	rcall	.+2938   	; 0xcd6 <lcdprintchar>
	
	lcdprintchar((param[1]>>4)	+ 0x30);	// min
 15c:	89 81       	ldd	r24, Y+1	; 0x01
 15e:	82 95       	swap	r24
 160:	8f 70       	andi	r24, 0x0F	; 15
 162:	80 5d       	subi	r24, 0xD0	; 208
 164:	b8 d5       	rcall	.+2928   	; 0xcd6 <lcdprintchar>
	lcdprintchar((param[1]&0x0F)+ 0x30);	//
 166:	89 81       	ldd	r24, Y+1	; 0x01
 168:	8f 70       	andi	r24, 0x0F	; 15
 16a:	80 5d       	subi	r24, 0xD0	; 208
 16c:	b4 d5       	rcall	.+2920   	; 0xcd6 <lcdprintchar>
	lcdprintchar(':');
 16e:	8a e3       	ldi	r24, 0x3A	; 58
 170:	b2 d5       	rcall	.+2916   	; 0xcd6 <lcdprintchar>
	
	lcdprintchar((param[0]>>4)	+ 0x30);	// seconds
 172:	88 81       	ld	r24, Y
 174:	82 95       	swap	r24
 176:	8f 70       	andi	r24, 0x0F	; 15
 178:	80 5d       	subi	r24, 0xD0	; 208
 17a:	ad d5       	rcall	.+2906   	; 0xcd6 <lcdprintchar>
	lcdprintchar((param[0]&0x0F)+ 0x30);	//
 17c:	88 81       	ld	r24, Y
 17e:	8f 70       	andi	r24, 0x0F	; 15
 180:	80 5d       	subi	r24, 0xD0	; 208
 182:	a9 d5       	rcall	.+2898   	; 0xcd6 <lcdprintchar>
	lcdprintchar(' ');
 184:	80 e2       	ldi	r24, 0x20	; 32
 186:	a7 d5       	rcall	.+2894   	; 0xcd6 <lcdprintchar>
	
	lcdprintchar((param[4]>>4)	+ 0x30);	// date
 188:	8c 81       	ldd	r24, Y+4	; 0x04
 18a:	82 95       	swap	r24
 18c:	8f 70       	andi	r24, 0x0F	; 15
 18e:	80 5d       	subi	r24, 0xD0	; 208
 190:	a2 d5       	rcall	.+2884   	; 0xcd6 <lcdprintchar>
	lcdprintchar((param[4]&0x0F)+ 0x30);	//
 192:	8c 81       	ldd	r24, Y+4	; 0x04
 194:	8f 70       	andi	r24, 0x0F	; 15
 196:	80 5d       	subi	r24, 0xD0	; 208
 198:	9e d5       	rcall	.+2876   	; 0xcd6 <lcdprintchar>
	lcdprintchar('/');
 19a:	8f e2       	ldi	r24, 0x2F	; 47
 19c:	9c d5       	rcall	.+2872   	; 0xcd6 <lcdprintchar>
	
	lcdprintchar(((param[5]>>4)&7)+ 0x30);	// month
 19e:	8d 81       	ldd	r24, Y+5	; 0x05
 1a0:	82 95       	swap	r24
 1a2:	8f 70       	andi	r24, 0x0F	; 15
 1a4:	87 70       	andi	r24, 0x07	; 7
 1a6:	80 5d       	subi	r24, 0xD0	; 208
 1a8:	96 d5       	rcall	.+2860   	; 0xcd6 <lcdprintchar>
	lcdprintchar((param[5]&0x0F)+ 0x30);	//
 1aa:	8d 81       	ldd	r24, Y+5	; 0x05
 1ac:	8f 70       	andi	r24, 0x0F	; 15
 1ae:	80 5d       	subi	r24, 0xD0	; 208
 1b0:	92 d5       	rcall	.+2852   	; 0xcd6 <lcdprintchar>
}
 1b2:	df 91       	pop	r29
 1b4:	cf 91       	pop	r28
 1b6:	08 95       	ret

000001b8 <lcdprintDay>:

void lcdprintDay(uint8_t day){
	if( !day ) lcdprint("ALL");
 1b8:	81 11       	cpse	r24, r1
 1ba:	04 c0       	rjmp	.+8      	; 0x1c4 <lcdprintDay+0xc>
 1bc:	81 e6       	ldi	r24, 0x61	; 97
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	74 d5       	rcall	.+2792   	; 0xcaa <lcdprint>
 1c2:	08 95       	ret
	else if( day == 1 )lcdprint("Sun");
 1c4:	81 30       	cpi	r24, 0x01	; 1
 1c6:	21 f4       	brne	.+8      	; 0x1d0 <lcdprintDay+0x18>
 1c8:	85 e6       	ldi	r24, 0x65	; 101
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	6e d5       	rcall	.+2780   	; 0xcaa <lcdprint>
 1ce:	08 95       	ret
	else if( day == 2 )lcdprint("Mon");
 1d0:	82 30       	cpi	r24, 0x02	; 2
 1d2:	21 f4       	brne	.+8      	; 0x1dc <lcdprintDay+0x24>
 1d4:	89 e6       	ldi	r24, 0x69	; 105
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	68 d5       	rcall	.+2768   	; 0xcaa <lcdprint>
 1da:	08 95       	ret
	else if( day == 3 )lcdprint("Tue");
 1dc:	83 30       	cpi	r24, 0x03	; 3
 1de:	21 f4       	brne	.+8      	; 0x1e8 <lcdprintDay+0x30>
 1e0:	8d e6       	ldi	r24, 0x6D	; 109
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	62 d5       	rcall	.+2756   	; 0xcaa <lcdprint>
 1e6:	08 95       	ret
	else if( day == 4 )lcdprint("Wed");
 1e8:	84 30       	cpi	r24, 0x04	; 4
 1ea:	21 f4       	brne	.+8      	; 0x1f4 <lcdprintDay+0x3c>
 1ec:	81 e7       	ldi	r24, 0x71	; 113
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	5c d5       	rcall	.+2744   	; 0xcaa <lcdprint>
 1f2:	08 95       	ret
	else if( day == 5 )lcdprint("Thu");
 1f4:	85 30       	cpi	r24, 0x05	; 5
 1f6:	21 f4       	brne	.+8      	; 0x200 <lcdprintDay+0x48>
 1f8:	85 e7       	ldi	r24, 0x75	; 117
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	56 d5       	rcall	.+2732   	; 0xcaa <lcdprint>
 1fe:	08 95       	ret
	else if( day == 6 )lcdprint("Fri");
 200:	86 30       	cpi	r24, 0x06	; 6
 202:	21 f4       	brne	.+8      	; 0x20c <lcdprintDay+0x54>
 204:	89 e7       	ldi	r24, 0x79	; 121
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	50 d5       	rcall	.+2720   	; 0xcaa <lcdprint>
 20a:	08 95       	ret
	else if( day == 7 )lcdprint("Sat");
 20c:	87 30       	cpi	r24, 0x07	; 7
 20e:	19 f4       	brne	.+6      	; 0x216 <lcdprintDay+0x5e>
 210:	8d e7       	ldi	r24, 0x7D	; 125
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	4a d5       	rcall	.+2708   	; 0xcaa <lcdprint>
 216:	08 95       	ret

00000218 <UpdateKeys>:
}

void UpdateKeys(){
	keys = (~PINC)&0x0F;
 218:	83 b3       	in	r24, 0x13	; 19
 21a:	80 95       	com	r24
 21c:	8f 70       	andi	r24, 0x0F	; 15
 21e:	80 93 f5 02 	sts	0x02F5, r24
	keysTimerReset;
 222:	83 e1       	ldi	r24, 0x13	; 19
 224:	80 93 62 01 	sts	0x0162, r24
 228:	08 95       	ret

0000022a <TestMenu>:
}

void TestMenu(){
	
	// temp Key for testing
	if( testKey(keyRIGHT) ){ dfPlayer(1, 0, 0); }
 22a:	80 91 f5 02 	lds	r24, 0x02F5
 22e:	80 ff       	sbrs	r24, 0
 230:	05 c0       	rjmp	.+10     	; 0x23c <TestMenu+0x12>
 232:	40 e0       	ldi	r20, 0x00	; 0
 234:	60 e0       	ldi	r22, 0x00	; 0
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	55 df       	rcall	.-342    	; 0xe4 <dfPlayer>
 23a:	08 95       	ret
	else if( testKey(keyLEFT) ){ dfPlayer(2, 0, 0);}
 23c:	81 ff       	sbrs	r24, 1
 23e:	05 c0       	rjmp	.+10     	; 0x24a <TestMenu+0x20>
 240:	40 e0       	ldi	r20, 0x00	; 0
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	82 e0       	ldi	r24, 0x02	; 2
 246:	4e df       	rcall	.-356    	; 0xe4 <dfPlayer>
 248:	08 95       	ret
	else if( testKey(keyENTER) ){
 24a:	82 ff       	sbrs	r24, 2
 24c:	0b c0       	rjmp	.+22     	; 0x264 <TestMenu+0x3a>
		if( dfIsReady ) dfPlayer(0xD, 0, 0);
 24e:	84 9b       	sbis	0x10, 4	; 16
 250:	05 c0       	rjmp	.+10     	; 0x25c <TestMenu+0x32>
 252:	40 e0       	ldi	r20, 0x00	; 0
 254:	60 e0       	ldi	r22, 0x00	; 0
 256:	8d e0       	ldi	r24, 0x0D	; 13
 258:	45 df       	rcall	.-374    	; 0xe4 <dfPlayer>
 25a:	08 95       	ret
		else dfPlayer(0xE, 0, 0);
 25c:	40 e0       	ldi	r20, 0x00	; 0
 25e:	60 e0       	ldi	r22, 0x00	; 0
 260:	8e e0       	ldi	r24, 0x0E	; 14
 262:	40 df       	rcall	.-384    	; 0xe4 <dfPlayer>
 264:	08 95       	ret

00000266 <LoadAlarm>:
		//uint8_t param[]={0xD0, 0x00, 0x00, 0x15, 0x21, 0x01, 0x04, 0x09, 0x16};
		//if( IIC_write(param, 9) ){ lcdClean(); lcdprint("Time Changed"); _delay_ms(1000);}
	}
}

void LoadAlarm(){
 266:	6f 92       	push	r6
 268:	7f 92       	push	r7
 26a:	8f 92       	push	r8
 26c:	9f 92       	push	r9
 26e:	af 92       	push	r10
 270:	bf 92       	push	r11
 272:	cf 92       	push	r12
 274:	df 92       	push	r13
 276:	ef 92       	push	r14
 278:	ff 92       	push	r15
 27a:	0f 93       	push	r16
 27c:	1f 93       	push	r17
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29
 282:	0f 2e       	mov	r0, r31
 284:	f2 e9       	ldi	r31, 0x92	; 146
 286:	af 2e       	mov	r10, r31
 288:	f2 e0       	ldi	r31, 0x02	; 2
 28a:	bf 2e       	mov	r11, r31
 28c:	f0 2d       	mov	r31, r0
 28e:	0f 2e       	mov	r0, r31
 290:	fe e2       	ldi	r31, 0x2E	; 46
 292:	cf 2e       	mov	r12, r31
 294:	f2 e0       	ldi	r31, 0x02	; 2
 296:	df 2e       	mov	r13, r31
 298:	f0 2d       	mov	r31, r0
 29a:	0f 2e       	mov	r0, r31
 29c:	f5 e6       	ldi	r31, 0x65	; 101
 29e:	ef 2e       	mov	r14, r31
 2a0:	f1 e0       	ldi	r31, 0x01	; 1
 2a2:	ff 2e       	mov	r15, r31
 2a4:	f0 2d       	mov	r31, r0
 2a6:	09 ec       	ldi	r16, 0xC9	; 201
 2a8:	11 e0       	ldi	r17, 0x01	; 1
 2aa:	0f 2e       	mov	r0, r31
 2ac:	ff ef       	ldi	r31, 0xFF	; 255
 2ae:	8f 2e       	mov	r8, r31
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	9f 2e       	mov	r9, r31
 2b4:	f0 2d       	mov	r31, r0
 2b6:	0f 2e       	mov	r0, r31
 2b8:	f6 ef       	ldi	r31, 0xF6	; 246
 2ba:	6f 2e       	mov	r6, r31
 2bc:	f2 e0       	ldi	r31, 0x02	; 2
 2be:	7f 2e       	mov	r7, r31
 2c0:	f0 2d       	mov	r31, r0
	uint16_t adr = 0;
 2c2:	c0 e0       	ldi	r28, 0x00	; 0
 2c4:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t index =0; index<99; index++ ){
		AlarmDir[index] = eeprom_read_byte((uint8_t*)adr++);
 2c6:	ce 01       	movw	r24, r28
 2c8:	b0 d5       	rcall	.+2912   	; 0xe2a <__eerd_byte_m8>
 2ca:	f5 01       	movw	r30, r10
 2cc:	81 93       	st	Z+, r24
 2ce:	5f 01       	movw	r10, r30
		AlarmMus[index] = eeprom_read_byte((uint8_t*)adr++);
 2d0:	ce 01       	movw	r24, r28
 2d2:	01 96       	adiw	r24, 0x01	; 1
 2d4:	aa d5       	rcall	.+2900   	; 0xe2a <__eerd_byte_m8>
 2d6:	f6 01       	movw	r30, r12
 2d8:	81 93       	st	Z+, r24
 2da:	6f 01       	movw	r12, r30
		AlarmDayDat[index] = eeprom_read_byte((uint8_t*)adr++);
 2dc:	ce 01       	movw	r24, r28
 2de:	02 96       	adiw	r24, 0x02	; 2
 2e0:	a4 d5       	rcall	.+2888   	; 0xe2a <__eerd_byte_m8>
 2e2:	f7 01       	movw	r30, r14
 2e4:	81 93       	st	Z+, r24
 2e6:	7f 01       	movw	r14, r30
		uint16_t temp = eeprom_read_word((uint16_t*)adr); adr+=2;
 2e8:	ce 01       	movw	r24, r28
 2ea:	03 96       	adiw	r24, 0x03	; 3
 2ec:	a6 d5       	rcall	.+2892   	; 0xe3a <__eerd_word_m8>
 2ee:	25 96       	adiw	r28, 0x05	; 5
		AlarmMin[index] = temp&0x3F; temp >>= 6;
 2f0:	9c 01       	movw	r18, r24
 2f2:	2f 73       	andi	r18, 0x3F	; 63
 2f4:	33 27       	eor	r19, r19
 2f6:	f8 01       	movw	r30, r16
 2f8:	21 93       	st	Z+, r18
 2fa:	8f 01       	movw	r16, r30
 2fc:	9c 01       	movw	r18, r24
 2fe:	00 24       	eor	r0, r0
 300:	22 0f       	add	r18, r18
 302:	33 1f       	adc	r19, r19
 304:	00 1c       	adc	r0, r0
 306:	22 0f       	add	r18, r18
 308:	33 1f       	adc	r19, r19
 30a:	00 1c       	adc	r0, r0
 30c:	23 2f       	mov	r18, r19
 30e:	30 2d       	mov	r19, r0
		AlarmHor[index] = temp&0x1F; temp >>=5;
 310:	2f 71       	andi	r18, 0x1F	; 31
 312:	33 27       	eor	r19, r19
 314:	f4 01       	movw	r30, r8
 316:	21 93       	st	Z+, r18
 318:	4f 01       	movw	r8, r30
 31a:	89 2f       	mov	r24, r25
 31c:	99 27       	eor	r25, r25
 31e:	86 95       	lsr	r24
 320:	86 95       	lsr	r24
 322:	86 95       	lsr	r24
		AlarmMon[index] = temp&0x0F;
 324:	8f 70       	andi	r24, 0x0F	; 15
 326:	99 27       	eor	r25, r25
 328:	f3 01       	movw	r30, r6
 32a:	81 93       	st	Z+, r24
 32c:	3f 01       	movw	r6, r30
	}
}

void LoadAlarm(){
	uint16_t adr = 0;
	for(uint8_t index =0; index<99; index++ ){
 32e:	cf 3e       	cpi	r28, 0xEF	; 239
 330:	f1 e0       	ldi	r31, 0x01	; 1
 332:	df 07       	cpc	r29, r31
 334:	41 f6       	brne	.-112    	; 0x2c6 <LoadAlarm+0x60>
		uint16_t temp = eeprom_read_word((uint16_t*)adr); adr+=2;
		AlarmMin[index] = temp&0x3F; temp >>= 6;
		AlarmHor[index] = temp&0x1F; temp >>=5;
		AlarmMon[index] = temp&0x0F;
	}
}
 336:	df 91       	pop	r29
 338:	cf 91       	pop	r28
 33a:	1f 91       	pop	r17
 33c:	0f 91       	pop	r16
 33e:	ff 90       	pop	r15
 340:	ef 90       	pop	r14
 342:	df 90       	pop	r13
 344:	cf 90       	pop	r12
 346:	bf 90       	pop	r11
 348:	af 90       	pop	r10
 34a:	9f 90       	pop	r9
 34c:	8f 90       	pop	r8
 34e:	7f 90       	pop	r7
 350:	6f 90       	pop	r6
 352:	08 95       	ret

00000354 <SaveAlarm>:
void SaveAlarm(){
 354:	cf 93       	push	r28
 356:	df 93       	push	r29
/*
 Byte 0,1 Folder, Music 
 Byte 2,(3,4) daydate, (month-4, hour-5, min-6)
*/
	 uint16_t adr = (uint16_t)(AlarmId*5);
 358:	80 91 64 01 	lds	r24, 0x0164
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	9c 01       	movw	r18, r24
 360:	22 0f       	add	r18, r18
 362:	33 1f       	adc	r19, r19
 364:	22 0f       	add	r18, r18
 366:	33 1f       	adc	r19, r19
 368:	28 0f       	add	r18, r24
 36a:	39 1f       	adc	r19, r25
 36c:	c2 2f       	mov	r28, r18
 36e:	d3 2f       	mov	r29, r19
	 eeprom_write_byte((uint8_t*)adr++, AlarmDir[AlarmId]);
 370:	fc 01       	movw	r30, r24
 372:	ee 56       	subi	r30, 0x6E	; 110
 374:	fd 4f       	sbci	r31, 0xFD	; 253
 376:	60 81       	ld	r22, Z
 378:	82 2f       	mov	r24, r18
 37a:	93 2f       	mov	r25, r19
 37c:	63 d5       	rcall	.+2758   	; 0xe44 <__eewr_byte_m8>
	 eeprom_write_byte((uint8_t*)adr++, AlarmMus[AlarmId]);
 37e:	e0 91 64 01 	lds	r30, 0x0164
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	e2 5d       	subi	r30, 0xD2	; 210
 386:	fd 4f       	sbci	r31, 0xFD	; 253
 388:	60 81       	ld	r22, Z
 38a:	ce 01       	movw	r24, r28
 38c:	01 96       	adiw	r24, 0x01	; 1
 38e:	5a d5       	rcall	.+2740   	; 0xe44 <__eewr_byte_m8>
	 eeprom_write_byte((uint8_t*)adr++, AlarmDayDat[AlarmId]);
 390:	e0 91 64 01 	lds	r30, 0x0164
 394:	f0 e0       	ldi	r31, 0x00	; 0
 396:	eb 59       	subi	r30, 0x9B	; 155
 398:	fe 4f       	sbci	r31, 0xFE	; 254
 39a:	60 81       	ld	r22, Z
 39c:	ce 01       	movw	r24, r28
 39e:	02 96       	adiw	r24, 0x02	; 2
 3a0:	51 d5       	rcall	.+2722   	; 0xe44 <__eewr_byte_m8>
	 uint16_t mon_hor_min = AlarmMon[AlarmId]; mon_hor_min <<= 5;
 3a2:	80 91 64 01 	lds	r24, 0x0164
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	fc 01       	movw	r30, r24
 3aa:	ea 50       	subi	r30, 0x0A	; 10
 3ac:	fd 4f       	sbci	r31, 0xFD	; 253
 3ae:	60 81       	ld	r22, Z
 3b0:	20 e2       	ldi	r18, 0x20	; 32
 3b2:	62 9f       	mul	r22, r18
 3b4:	b0 01       	movw	r22, r0
 3b6:	11 24       	eor	r1, r1
	 mon_hor_min |= AlarmHor[AlarmId]; mon_hor_min <<= 6;
 3b8:	fc 01       	movw	r30, r24
 3ba:	e1 50       	subi	r30, 0x01	; 1
 3bc:	ff 4f       	sbci	r31, 0xFF	; 255
 3be:	20 81       	ld	r18, Z
 3c0:	62 2b       	or	r22, r18
 3c2:	00 24       	eor	r0, r0
 3c4:	76 95       	lsr	r23
 3c6:	67 95       	ror	r22
 3c8:	07 94       	ror	r0
 3ca:	76 95       	lsr	r23
 3cc:	67 95       	ror	r22
 3ce:	07 94       	ror	r0
 3d0:	76 2f       	mov	r23, r22
 3d2:	60 2d       	mov	r22, r0
	 mon_hor_min |= AlarmMin[AlarmId];
 3d4:	fc 01       	movw	r30, r24
 3d6:	e7 53       	subi	r30, 0x37	; 55
 3d8:	fe 4f       	sbci	r31, 0xFE	; 254
 3da:	80 81       	ld	r24, Z
 3dc:	68 2b       	or	r22, r24
	 eeprom_write_word((uint16_t*)adr, mon_hor_min);
 3de:	ce 01       	movw	r24, r28
 3e0:	03 96       	adiw	r24, 0x03	; 3
 3e2:	3d d5       	rcall	.+2682   	; 0xe5e <__eewr_word_m8>
}
 3e4:	df 91       	pop	r29
 3e6:	cf 91       	pop	r28
 3e8:	08 95       	ret

000003ea <SaveEEPROM>:
void SaveEEPROM(){
	eeprom_write_byte((uint8_t*)511, dfVolume);
 3ea:	60 91 2c 02 	lds	r22, 0x022C
 3ee:	8f ef       	ldi	r24, 0xFF	; 255
 3f0:	91 e0       	ldi	r25, 0x01	; 1
 3f2:	28 d5       	rcall	.+2640   	; 0xe44 <__eewr_byte_m8>
	
	lcdClean();lcdprintat(1,6,"Saved!");_delay_ms(300);
 3f4:	8f d4       	rcall	.+2334   	; 0xd14 <lcdClean>
 3f6:	41 e8       	ldi	r20, 0x81	; 129
 3f8:	50 e0       	ldi	r21, 0x00	; 0
 3fa:	66 e0       	ldi	r22, 0x06	; 6
 3fc:	70 e0       	ldi	r23, 0x00	; 0
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	73 d4       	rcall	.+2278   	; 0xcea <lcdprintat>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 404:	2f ef       	ldi	r18, 0xFF	; 255
 406:	85 ea       	ldi	r24, 0xA5	; 165
 408:	9e e0       	ldi	r25, 0x0E	; 14
 40a:	21 50       	subi	r18, 0x01	; 1
 40c:	80 40       	sbci	r24, 0x00	; 0
 40e:	90 40       	sbci	r25, 0x00	; 0
 410:	e1 f7       	brne	.-8      	; 0x40a <SaveEEPROM+0x20>
 412:	00 c0       	rjmp	.+0      	; 0x414 <SaveEEPROM+0x2a>
 414:	00 00       	nop
 416:	08 95       	ret

00000418 <LoadEEPROM>:
}
void LoadEEPROM(){
	dfVolume = eeprom_read_byte((uint8_t*)511);
 418:	8f ef       	ldi	r24, 0xFF	; 255
 41a:	91 e0       	ldi	r25, 0x01	; 1
 41c:	06 d5       	rcall	.+2572   	; 0xe2a <__eerd_byte_m8>
 41e:	80 93 2c 02 	sts	0x022C, r24
	dfPlayer(0x06, 1, dfVolume);
 422:	48 2f       	mov	r20, r24
 424:	61 e0       	ldi	r22, 0x01	; 1
 426:	86 e0       	ldi	r24, 0x06	; 6
 428:	5d de       	rcall	.-838    	; 0xe4 <dfPlayer>
 42a:	08 95       	ret

0000042c <start>:
}
void start(){
	UART_init(9600);
 42c:	60 e8       	ldi	r22, 0x80	; 128
 42e:	75 e2       	ldi	r23, 0x25	; 37
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	bb d4       	rcall	.+2422   	; 0xdac <UART_init>
	
	// Buttons
	clearbit(DDRD, 4);
 436:	8c 98       	cbi	0x11, 4	; 17
	clearbit(SFIOR, PUD);	// pull up enable
 438:	80 b7       	in	r24, 0x30	; 48
 43a:	8b 7f       	andi	r24, 0xFB	; 251
 43c:	80 bf       	out	0x30, r24	; 48
	PORTC = 0xFF;
 43e:	8f ef       	ldi	r24, 0xFF	; 255
 440:	85 bb       	out	0x15, r24	; 21
	DDRC = 0xF0;
 442:	80 ef       	ldi	r24, 0xF0	; 240
 444:	84 bb       	out	0x14, r24	; 20
	
	IIC_init();
 446:	39 d3       	rcall	.+1650   	; 0xaba <IIC_init>
	
	// LCD
	// backligth
	setbit(DDRD, 5);   // output
 448:	8d 9a       	sbi	0x11, 5	; 17
	setbit(PORTD, 5);	// high
 44a:	95 9a       	sbi	0x12, 5	; 18
	lcdInit();			// already done in Firmware
 44c:	6c d4       	rcall	.+2264   	; 0xd26 <lcdInit>
	lcdClean();
 44e:	62 d4       	rcall	.+2244   	; 0xd14 <lcdClean>
	lcdprintat(0, 2,"Starting..");
 450:	48 e8       	ldi	r20, 0x88	; 136
 452:	50 e0       	ldi	r21, 0x00	; 0
 454:	62 e0       	ldi	r22, 0x02	; 2
 456:	70 e0       	ldi	r23, 0x00	; 0
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	46 d4       	rcall	.+2188   	; 0xcea <lcdprintat>
	
	// Init Timer
	TCCR0 = 0x05;		// div 1024
 45e:	85 e0       	ldi	r24, 0x05	; 5
 460:	83 bf       	out	0x33, r24	; 51
	setbit(TIMSK, TOIE0);
 462:	89 b7       	in	r24, 0x39	; 57
 464:	81 60       	ori	r24, 0x01	; 1
 466:	89 bf       	out	0x39, r24	; 57
	sei();
 468:	78 94       	sei
	
	
	keysTimerReset;
 46a:	83 e1       	ldi	r24, 0x13	; 19
 46c:	80 93 62 01 	sts	0x0162, r24
	rtcTimerReset;
 470:	8c e0       	ldi	r24, 0x0C	; 12
 472:	80 93 c8 01 	sts	0x01C8, r24
	
	/////////////////////////////////////
	// Debug Only
	backlightTimerReset = 100;
 476:	84 e6       	ldi	r24, 0x64	; 100
 478:	80 93 91 02 	sts	0x0291, r24
	backlightSetON;
 47c:	80 93 2d 02 	sts	0x022D, r24
 480:	2f ef       	ldi	r18, 0xFF	; 255
 482:	85 ea       	ldi	r24, 0xA5	; 165
 484:	9e e0       	ldi	r25, 0x0E	; 14
 486:	21 50       	subi	r18, 0x01	; 1
 488:	80 40       	sbci	r24, 0x00	; 0
 48a:	90 40       	sbci	r25, 0x00	; 0
 48c:	e1 f7       	brne	.-8      	; 0x486 <__stack+0x27>
 48e:	00 c0       	rjmp	.+0      	; 0x490 <__stack+0x31>
 490:	00 00       	nop
	/////////////////////////////////////
	
	_delay_ms(300);
	
	LoadEEPROM();
 492:	c2 df       	rcall	.-124    	; 0x418 <LoadEEPROM>
	LoadAlarm();
 494:	e8 de       	rcall	.-560    	; 0x266 <LoadAlarm>
 496:	08 95       	ret

00000498 <main>:
}
int main(void)
{	
	start();
 498:	c9 df       	rcall	.-110    	; 0x42c <start>
	menu = 0;
 49a:	10 92 ef 00 	sts	0x00EF, r1
	
    while(1){
		setBackligth(backlightTimer);
		if( !keysTimer ) UpdateKeys();					// read keys each amount of time
		if( !blinktimer ) blinktimer=blinkTimerReset;
 49e:	0f 2e       	mov	r0, r31
 4a0:	fb e0       	ldi	r31, 0x0B	; 11
 4a2:	cf 2e       	mov	r12, r31
 4a4:	f0 2d       	mov	r31, r0
			}
			// Menu Alarm Config
			else if( menustat==1 && menu>0x10 ){
				if( testKey(keyENTER) ){	
					if( menu<0x17) menu++;
					else menu = 0x11;
 4a6:	0f 2e       	mov	r0, r31
 4a8:	f1 e1       	ldi	r31, 0x11	; 17
 4aa:	9f 2e       	mov	r9, r31
 4ac:	f0 2d       	mov	r31, r0
			if( keys ) backlightSetON;						// if any key pressed keep backlight on
			
			////////////////////////////////////////////////////////////////
			// Default screen
			if( menu == 0 ){
				if( testKey(keyMENU) ) menu = 0x10;		// enter main menu
 4ae:	68 94       	set
 4b0:	aa 24       	eor	r10, r10
 4b2:	a4 f8       	bld	r10, 4
		
		
		//////////////////////////////////////////////////////////////////////////////
		// Update Time
		if( !rtcTimer ){
			rtcTimerReset;
 4b4:	0f 2e       	mov	r0, r31
 4b6:	fc e0       	ldi	r31, 0x0C	; 12
 4b8:	df 2e       	mov	r13, r31
 4ba:	f0 2d       	mov	r31, r0
			
			param[0] = 0xD0; param[1]=0;
 4bc:	c8 ef       	ldi	r28, 0xF8	; 248
 4be:	d0 e0       	ldi	r29, 0x00	; 0
 4c0:	0f 2e       	mov	r0, r31
 4c2:	f0 ed       	ldi	r31, 0xD0	; 208
 4c4:	bf 2e       	mov	r11, r31
 4c6:	f0 2d       	mov	r31, r0
 4c8:	09 ef       	ldi	r16, 0xF9	; 249
 4ca:	10 e0       	ldi	r17, 0x00	; 0
			if( IIC_read(param, 7) ){
				if( dfIsReady  && (param[1]==0x00 && param[2]==0x22)) dfPlayer(0xf, 0x2, 0x1);
				else if( dfIsReady  && (param[1]==0x00 && param[2]==0x08)) dfPlayer(0xf, 0x2, 0x1);
 4cc:	0f 2e       	mov	r0, r31
 4ce:	fa ef       	ldi	r31, 0xFA	; 250
 4d0:	ef 2e       	mov	r14, r31
 4d2:	f0 e0       	ldi	r31, 0x00	; 0
 4d4:	ff 2e       	mov	r15, r31
 4d6:	f0 2d       	mov	r31, r0
{	
	start();
	menu = 0;
	
    while(1){
		setBackligth(backlightTimer);
 4d8:	80 91 2d 02 	lds	r24, 0x022D
 4dc:	c0 dd       	rcall	.-1152   	; 0x5e <setBackligth>
		if( !keysTimer ) UpdateKeys();					// read keys each amount of time
 4de:	80 91 62 01 	lds	r24, 0x0162
 4e2:	81 11       	cpse	r24, r1
 4e4:	01 c0       	rjmp	.+2      	; 0x4e8 <main+0x50>
 4e6:	98 de       	rcall	.-720    	; 0x218 <UpdateKeys>
		if( !blinktimer ) blinktimer=blinkTimerReset;
 4e8:	80 91 ee 00 	lds	r24, 0x00EE
 4ec:	81 11       	cpse	r24, r1
 4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <main+0x5c>
 4f0:	c0 92 ee 00 	sts	0x00EE, r12
		
		uint8_t menustat = menu>>4;
 4f4:	20 91 ef 00 	lds	r18, 0x00EF
 4f8:	82 2e       	mov	r8, r18
 4fa:	86 94       	lsr	r8
 4fc:	86 94       	lsr	r8
 4fe:	86 94       	lsr	r8
 500:	86 94       	lsr	r8
		
		/////////////////////////////////////////////////////
		// Keys Controller
		if( !testBacklight ){								// check if backlight off
 502:	95 99       	sbic	0x12, 5	; 18
 504:	0a c0       	rjmp	.+20     	; 0x51a <main+0x82>
			if( keys ) backlightSetON;						// turn on backlight if any key pressed
 506:	80 91 f5 02 	lds	r24, 0x02F5
 50a:	88 23       	and	r24, r24
 50c:	09 f4       	brne	.+2      	; 0x510 <main+0x78>
 50e:	4f c1       	rjmp	.+670    	; 0x7ae <main+0x316>
 510:	80 91 91 02 	lds	r24, 0x0291
 514:	80 93 2d 02 	sts	0x022D, r24
 518:	4a c1       	rjmp	.+660    	; 0x7ae <main+0x316>
		} 
		else{
			if( keys ) backlightSetON;						// if any key pressed keep backlight on
 51a:	80 91 f5 02 	lds	r24, 0x02F5
 51e:	88 23       	and	r24, r24
 520:	21 f0       	breq	.+8      	; 0x52a <main+0x92>
 522:	90 91 91 02 	lds	r25, 0x0291
 526:	90 93 2d 02 	sts	0x022D, r25
			
			////////////////////////////////////////////////////////////////
			// Default screen
			if( menu == 0 ){
 52a:	21 11       	cpse	r18, r1
 52c:	05 c0       	rjmp	.+10     	; 0x538 <main+0xa0>
				if( testKey(keyMENU) ) menu = 0x10;		// enter main menu
 52e:	83 fd       	sbrc	r24, 3
 530:	a0 92 ef 00 	sts	0x00EF, r10
				TestMenu();
 534:	7a de       	rcall	.-780    	; 0x22a <TestMenu>
 536:	3b c1       	rjmp	.+630    	; 0x7ae <main+0x316>
			}
			// Menu Alarm Config
			else if( menustat==1 && menu>0x10 ){
 538:	91 e0       	ldi	r25, 0x01	; 1
 53a:	89 12       	cpse	r8, r25
 53c:	ea c0       	rjmp	.+468    	; 0x712 <main+0x27a>
 53e:	21 31       	cpi	r18, 0x11	; 17
 540:	08 f4       	brcc	.+2      	; 0x544 <main+0xac>
 542:	b7 c2       	rjmp	.+1390   	; 0xab2 <main+0x61a>
				if( testKey(keyENTER) ){	
 544:	82 ff       	sbrs	r24, 2
 546:	09 c0       	rjmp	.+18     	; 0x55a <main+0xc2>
					if( menu<0x17) menu++;
 548:	27 31       	cpi	r18, 0x17	; 23
 54a:	20 f4       	brcc	.+8      	; 0x554 <main+0xbc>
 54c:	2f 5f       	subi	r18, 0xFF	; 255
 54e:	20 93 ef 00 	sts	0x00EF, r18
 552:	2d c1       	rjmp	.+602    	; 0x7ae <main+0x316>
					else menu = 0x11;
 554:	90 92 ef 00 	sts	0x00EF, r9
 558:	2a c1       	rjmp	.+596    	; 0x7ae <main+0x316>
				}
				else if( testKey(keyRIGHT) ){
 55a:	80 ff       	sbrs	r24, 0
 55c:	58 c0       	rjmp	.+176    	; 0x60e <main+0x176>
					if( menu == 0x11 && AlarmId<99){SaveAlarm(); AlarmId++;}
 55e:	21 31       	cpi	r18, 0x11	; 17
 560:	61 f4       	brne	.+24     	; 0x57a <main+0xe2>
 562:	80 91 64 01 	lds	r24, 0x0164
 566:	83 36       	cpi	r24, 0x63	; 99
 568:	08 f0       	brcs	.+2      	; 0x56c <main+0xd4>
 56a:	21 c1       	rjmp	.+578    	; 0x7ae <main+0x316>
 56c:	f3 de       	rcall	.-538    	; 0x354 <SaveAlarm>
 56e:	80 91 64 01 	lds	r24, 0x0164
 572:	8f 5f       	subi	r24, 0xFF	; 255
 574:	80 93 64 01 	sts	0x0164, r24
 578:	1a c1       	rjmp	.+564    	; 0x7ae <main+0x316>
					else if( menu == 0x12 )AlarmDir[AlarmId]++;
 57a:	22 31       	cpi	r18, 0x12	; 18
 57c:	49 f4       	brne	.+18     	; 0x590 <main+0xf8>
 57e:	e0 91 64 01 	lds	r30, 0x0164
 582:	f0 e0       	ldi	r31, 0x00	; 0
 584:	ee 56       	subi	r30, 0x6E	; 110
 586:	fd 4f       	sbci	r31, 0xFD	; 253
 588:	80 81       	ld	r24, Z
 58a:	8f 5f       	subi	r24, 0xFF	; 255
 58c:	80 83       	st	Z, r24
 58e:	0f c1       	rjmp	.+542    	; 0x7ae <main+0x316>
					else if( menu == 0x13 )AlarmMus[AlarmId]++;
 590:	23 31       	cpi	r18, 0x13	; 19
 592:	49 f4       	brne	.+18     	; 0x5a6 <main+0x10e>
 594:	e0 91 64 01 	lds	r30, 0x0164
 598:	f0 e0       	ldi	r31, 0x00	; 0
 59a:	e2 5d       	subi	r30, 0xD2	; 210
 59c:	fd 4f       	sbci	r31, 0xFD	; 253
 59e:	80 81       	ld	r24, Z
 5a0:	8f 5f       	subi	r24, 0xFF	; 255
 5a2:	80 83       	st	Z, r24
 5a4:	04 c1       	rjmp	.+520    	; 0x7ae <main+0x316>
					else if( menu == 0x14 )AlarmHor[AlarmId]++;
 5a6:	24 31       	cpi	r18, 0x14	; 20
 5a8:	49 f4       	brne	.+18     	; 0x5bc <main+0x124>
 5aa:	e0 91 64 01 	lds	r30, 0x0164
 5ae:	f0 e0       	ldi	r31, 0x00	; 0
 5b0:	e1 50       	subi	r30, 0x01	; 1
 5b2:	ff 4f       	sbci	r31, 0xFF	; 255
 5b4:	80 81       	ld	r24, Z
 5b6:	8f 5f       	subi	r24, 0xFF	; 255
 5b8:	80 83       	st	Z, r24
 5ba:	f9 c0       	rjmp	.+498    	; 0x7ae <main+0x316>
					else if( menu == 0x15 )AlarmMin[AlarmId]++;
 5bc:	25 31       	cpi	r18, 0x15	; 21
 5be:	49 f4       	brne	.+18     	; 0x5d2 <main+0x13a>
 5c0:	e0 91 64 01 	lds	r30, 0x0164
 5c4:	f0 e0       	ldi	r31, 0x00	; 0
 5c6:	e7 53       	subi	r30, 0x37	; 55
 5c8:	fe 4f       	sbci	r31, 0xFE	; 254
 5ca:	80 81       	ld	r24, Z
 5cc:	8f 5f       	subi	r24, 0xFF	; 255
 5ce:	80 83       	st	Z, r24
 5d0:	ee c0       	rjmp	.+476    	; 0x7ae <main+0x316>
					else if( menu == 0x16 )AlarmDayDat[AlarmId]+=0x20;
 5d2:	26 31       	cpi	r18, 0x16	; 22
 5d4:	49 f4       	brne	.+18     	; 0x5e8 <main+0x150>
 5d6:	e0 91 64 01 	lds	r30, 0x0164
 5da:	f0 e0       	ldi	r31, 0x00	; 0
 5dc:	eb 59       	subi	r30, 0x9B	; 155
 5de:	fe 4f       	sbci	r31, 0xFE	; 254
 5e0:	80 81       	ld	r24, Z
 5e2:	80 5e       	subi	r24, 0xE0	; 224
 5e4:	80 83       	st	Z, r24
 5e6:	e3 c0       	rjmp	.+454    	; 0x7ae <main+0x316>
					else if( menu == 0x17 && AlarmDayDat[AlarmId]<31)AlarmDayDat[AlarmId]++;
 5e8:	27 31       	cpi	r18, 0x17	; 23
 5ea:	09 f0       	breq	.+2      	; 0x5ee <main+0x156>
 5ec:	e0 c0       	rjmp	.+448    	; 0x7ae <main+0x316>
 5ee:	80 91 64 01 	lds	r24, 0x0164
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	fc 01       	movw	r30, r24
 5f6:	eb 59       	subi	r30, 0x9B	; 155
 5f8:	fe 4f       	sbci	r31, 0xFE	; 254
 5fa:	20 81       	ld	r18, Z
 5fc:	2f 31       	cpi	r18, 0x1F	; 31
 5fe:	08 f0       	brcs	.+2      	; 0x602 <main+0x16a>
 600:	d6 c0       	rjmp	.+428    	; 0x7ae <main+0x316>
 602:	fc 01       	movw	r30, r24
 604:	eb 59       	subi	r30, 0x9B	; 155
 606:	fe 4f       	sbci	r31, 0xFE	; 254
 608:	2f 5f       	subi	r18, 0xFF	; 255
 60a:	20 83       	st	Z, r18
 60c:	d0 c0       	rjmp	.+416    	; 0x7ae <main+0x316>
				}
				else if( testKey(keyLEFT) ){
 60e:	81 ff       	sbrs	r24, 1
 610:	71 c0       	rjmp	.+226    	; 0x6f4 <main+0x25c>
					if(menu == 0x11 && AlarmId){SaveAlarm(); AlarmId--;}
 612:	21 31       	cpi	r18, 0x11	; 17
 614:	59 f4       	brne	.+22     	; 0x62c <main+0x194>
 616:	80 91 64 01 	lds	r24, 0x0164
 61a:	88 23       	and	r24, r24
 61c:	49 f1       	breq	.+82     	; 0x670 <main+0x1d8>
 61e:	9a de       	rcall	.-716    	; 0x354 <SaveAlarm>
 620:	80 91 64 01 	lds	r24, 0x0164
 624:	81 50       	subi	r24, 0x01	; 1
 626:	80 93 64 01 	sts	0x0164, r24
 62a:	c1 c0       	rjmp	.+386    	; 0x7ae <main+0x316>
					else if( menu == 0x12 && AlarmDir[AlarmId])AlarmDir[AlarmId]--;
 62c:	22 31       	cpi	r18, 0x12	; 18
 62e:	79 f4       	brne	.+30     	; 0x64e <main+0x1b6>
 630:	80 91 64 01 	lds	r24, 0x0164
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	fc 01       	movw	r30, r24
 638:	ee 56       	subi	r30, 0x6E	; 110
 63a:	fd 4f       	sbci	r31, 0xFD	; 253
 63c:	30 81       	ld	r19, Z
 63e:	33 23       	and	r19, r19
 640:	49 f1       	breq	.+82     	; 0x694 <main+0x1fc>
 642:	fc 01       	movw	r30, r24
 644:	ee 56       	subi	r30, 0x6E	; 110
 646:	fd 4f       	sbci	r31, 0xFD	; 253
 648:	31 50       	subi	r19, 0x01	; 1
 64a:	30 83       	st	Z, r19
 64c:	b0 c0       	rjmp	.+352    	; 0x7ae <main+0x316>
					else if( menu == 0x13 && AlarmMus[AlarmId])AlarmMus[AlarmId]--;
 64e:	23 31       	cpi	r18, 0x13	; 19
 650:	79 f4       	brne	.+30     	; 0x670 <main+0x1d8>
 652:	80 91 64 01 	lds	r24, 0x0164
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	fc 01       	movw	r30, r24
 65a:	e2 5d       	subi	r30, 0xD2	; 210
 65c:	fd 4f       	sbci	r31, 0xFD	; 253
 65e:	30 81       	ld	r19, Z
 660:	33 23       	and	r19, r19
 662:	51 f1       	breq	.+84     	; 0x6b8 <main+0x220>
 664:	fc 01       	movw	r30, r24
 666:	e2 5d       	subi	r30, 0xD2	; 210
 668:	fd 4f       	sbci	r31, 0xFD	; 253
 66a:	31 50       	subi	r19, 0x01	; 1
 66c:	30 83       	st	Z, r19
 66e:	9f c0       	rjmp	.+318    	; 0x7ae <main+0x316>
					else if( menu == 0x14 && AlarmHor[AlarmId])AlarmHor[AlarmId]--;
 670:	24 31       	cpi	r18, 0x14	; 20
 672:	81 f4       	brne	.+32     	; 0x694 <main+0x1fc>
 674:	80 91 64 01 	lds	r24, 0x0164
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	fc 01       	movw	r30, r24
 67c:	e1 50       	subi	r30, 0x01	; 1
 67e:	ff 4f       	sbci	r31, 0xFF	; 255
 680:	20 81       	ld	r18, Z
 682:	22 23       	and	r18, r18
 684:	09 f4       	brne	.+2      	; 0x688 <main+0x1f0>
 686:	93 c0       	rjmp	.+294    	; 0x7ae <main+0x316>
 688:	fc 01       	movw	r30, r24
 68a:	e1 50       	subi	r30, 0x01	; 1
 68c:	ff 4f       	sbci	r31, 0xFF	; 255
 68e:	21 50       	subi	r18, 0x01	; 1
 690:	20 83       	st	Z, r18
 692:	8d c0       	rjmp	.+282    	; 0x7ae <main+0x316>
					else if( menu == 0x15 && AlarmMin[AlarmId])AlarmMin[AlarmId]--;
 694:	25 31       	cpi	r18, 0x15	; 21
 696:	81 f4       	brne	.+32     	; 0x6b8 <main+0x220>
 698:	80 91 64 01 	lds	r24, 0x0164
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	fc 01       	movw	r30, r24
 6a0:	e7 53       	subi	r30, 0x37	; 55
 6a2:	fe 4f       	sbci	r31, 0xFE	; 254
 6a4:	20 81       	ld	r18, Z
 6a6:	22 23       	and	r18, r18
 6a8:	09 f4       	brne	.+2      	; 0x6ac <main+0x214>
 6aa:	81 c0       	rjmp	.+258    	; 0x7ae <main+0x316>
 6ac:	fc 01       	movw	r30, r24
 6ae:	e7 53       	subi	r30, 0x37	; 55
 6b0:	fe 4f       	sbci	r31, 0xFE	; 254
 6b2:	21 50       	subi	r18, 0x01	; 1
 6b4:	20 83       	st	Z, r18
 6b6:	7b c0       	rjmp	.+246    	; 0x7ae <main+0x316>
					else if( menu == 0x16 )AlarmDayDat[AlarmId]-=0x20;
 6b8:	26 31       	cpi	r18, 0x16	; 22
 6ba:	49 f4       	brne	.+18     	; 0x6ce <main+0x236>
 6bc:	e0 91 64 01 	lds	r30, 0x0164
 6c0:	f0 e0       	ldi	r31, 0x00	; 0
 6c2:	eb 59       	subi	r30, 0x9B	; 155
 6c4:	fe 4f       	sbci	r31, 0xFE	; 254
 6c6:	80 81       	ld	r24, Z
 6c8:	80 52       	subi	r24, 0x20	; 32
 6ca:	80 83       	st	Z, r24
 6cc:	70 c0       	rjmp	.+224    	; 0x7ae <main+0x316>
					else if( menu == 0x17 && AlarmDayDat[AlarmId]>0) AlarmDayDat[AlarmId]--;
 6ce:	27 31       	cpi	r18, 0x17	; 23
 6d0:	09 f0       	breq	.+2      	; 0x6d4 <main+0x23c>
 6d2:	6d c0       	rjmp	.+218    	; 0x7ae <main+0x316>
 6d4:	80 91 64 01 	lds	r24, 0x0164
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	fc 01       	movw	r30, r24
 6dc:	eb 59       	subi	r30, 0x9B	; 155
 6de:	fe 4f       	sbci	r31, 0xFE	; 254
 6e0:	20 81       	ld	r18, Z
 6e2:	22 23       	and	r18, r18
 6e4:	09 f4       	brne	.+2      	; 0x6e8 <main+0x250>
 6e6:	63 c0       	rjmp	.+198    	; 0x7ae <main+0x316>
 6e8:	fc 01       	movw	r30, r24
 6ea:	eb 59       	subi	r30, 0x9B	; 155
 6ec:	fe 4f       	sbci	r31, 0xFE	; 254
 6ee:	21 50       	subi	r18, 0x01	; 1
 6f0:	20 83       	st	Z, r18
 6f2:	5d c0       	rjmp	.+186    	; 0x7ae <main+0x316>
				}
				else if( testKey(keyMENU) ){
 6f4:	83 ff       	sbrs	r24, 3
 6f6:	5b c0       	rjmp	.+182    	; 0x7ae <main+0x316>
					if( menu > 0x11) menu--;
 6f8:	22 31       	cpi	r18, 0x12	; 18
 6fa:	20 f0       	brcs	.+8      	; 0x704 <main+0x26c>
 6fc:	21 50       	subi	r18, 0x01	; 1
 6fe:	20 93 ef 00 	sts	0x00EF, r18
 702:	55 c0       	rjmp	.+170    	; 0x7ae <main+0x316>
					else{
						SaveAlarm();
 704:	27 de       	rcall	.-946    	; 0x354 <SaveAlarm>
						menu &= 0xF0;
 706:	80 91 ef 00 	lds	r24, 0x00EF
 70a:	80 7f       	andi	r24, 0xF0	; 240
 70c:	80 93 ef 00 	sts	0x00EF, r24
 710:	4e c0       	rjmp	.+156    	; 0x7ae <main+0x316>
					}
				}
			}
			// Menu Volume
			else if( menu == 0x31){
 712:	21 33       	cpi	r18, 0x31	; 49
 714:	29 f5       	brne	.+74     	; 0x760 <main+0x2c8>
	_delay_ms(300);
	
	LoadEEPROM();
	LoadAlarm();
}
int main(void)
 716:	98 2f       	mov	r25, r24
 718:	9c 70       	andi	r25, 0x0C	; 12
					}
				}
			}
			// Menu Volume
			else if( menu == 0x31){
				if( testKey(keyMENU) || testKey(keyENTER)){ SaveEEPROM(); menu--; }
 71a:	39 f0       	breq	.+14     	; 0x72a <main+0x292>
 71c:	66 de       	rcall	.-820    	; 0x3ea <SaveEEPROM>
 71e:	80 91 ef 00 	lds	r24, 0x00EF
 722:	81 50       	subi	r24, 0x01	; 1
 724:	80 93 ef 00 	sts	0x00EF, r24
 728:	42 c0       	rjmp	.+132    	; 0x7ae <main+0x316>
				else if( testKey(keyRIGHT) && dfVolume<30) dfPlayer(0x06, 1, ++dfVolume);	// volume++
 72a:	80 ff       	sbrs	r24, 0
 72c:	0b c0       	rjmp	.+22     	; 0x744 <main+0x2ac>
 72e:	40 91 2c 02 	lds	r20, 0x022C
 732:	4e 31       	cpi	r20, 0x1E	; 30
 734:	38 f4       	brcc	.+14     	; 0x744 <main+0x2ac>
 736:	4f 5f       	subi	r20, 0xFF	; 255
 738:	40 93 2c 02 	sts	0x022C, r20
 73c:	61 e0       	ldi	r22, 0x01	; 1
 73e:	86 e0       	ldi	r24, 0x06	; 6
 740:	d1 dc       	rcall	.-1630   	; 0xe4 <dfPlayer>
 742:	35 c0       	rjmp	.+106    	; 0x7ae <main+0x316>
				else if( testKey(keyLEFT) && dfVolume>0) dfPlayer(0x06, 1, --dfVolume);		// volume--
 744:	81 ff       	sbrs	r24, 1
 746:	33 c0       	rjmp	.+102    	; 0x7ae <main+0x316>
 748:	80 91 2c 02 	lds	r24, 0x022C
 74c:	88 23       	and	r24, r24
 74e:	79 f1       	breq	.+94     	; 0x7ae <main+0x316>
 750:	48 2f       	mov	r20, r24
 752:	41 50       	subi	r20, 0x01	; 1
 754:	40 93 2c 02 	sts	0x022C, r20
 758:	61 e0       	ldi	r22, 0x01	; 1
 75a:	86 e0       	ldi	r24, 0x06	; 6
 75c:	c3 dc       	rcall	.-1658   	; 0xe4 <dfPlayer>
 75e:	27 c0       	rjmp	.+78     	; 0x7ae <main+0x316>
			}
			// Main Menu
			else if( menustat ){
 760:	88 20       	and	r8, r8
 762:	29 f1       	breq	.+74     	; 0x7ae <main+0x316>
				if(!(menu&0xF)){
 764:	92 2f       	mov	r25, r18
 766:	9f 70       	andi	r25, 0x0F	; 15
 768:	e9 f4       	brne	.+58     	; 0x7a4 <main+0x30c>
					if( testKey(keyMENU) )menu = 0 ;
 76a:	83 ff       	sbrs	r24, 3
 76c:	03 c0       	rjmp	.+6      	; 0x774 <main+0x2dc>
 76e:	10 92 ef 00 	sts	0x00EF, r1
 772:	1d c0       	rjmp	.+58     	; 0x7ae <main+0x316>
					else if( testKey(keyLEFT) && menustat>1) menu -= 0x10;			// main menu
 774:	81 ff       	sbrs	r24, 1
 776:	07 c0       	rjmp	.+14     	; 0x786 <main+0x2ee>
 778:	e1 e0       	ldi	r30, 0x01	; 1
 77a:	e8 15       	cp	r30, r8
 77c:	20 f4       	brcc	.+8      	; 0x786 <main+0x2ee>
 77e:	20 51       	subi	r18, 0x10	; 16
 780:	20 93 ef 00 	sts	0x00EF, r18
 784:	14 c0       	rjmp	.+40     	; 0x7ae <main+0x316>
					else if( testKey(keyRIGHT)&& menustat<3) menu += 0x10;			// main menu
 786:	80 ff       	sbrs	r24, 0
 788:	07 c0       	rjmp	.+14     	; 0x798 <main+0x300>
 78a:	f2 e0       	ldi	r31, 0x02	; 2
 78c:	f8 15       	cp	r31, r8
 78e:	20 f0       	brcs	.+8      	; 0x798 <main+0x300>
 790:	20 5f       	subi	r18, 0xF0	; 240
 792:	20 93 ef 00 	sts	0x00EF, r18
 796:	0b c0       	rjmp	.+22     	; 0x7ae <main+0x316>
					else if( testKey(keyENTER))	menu++;					// Enter subMenu
 798:	82 ff       	sbrs	r24, 2
 79a:	09 c0       	rjmp	.+18     	; 0x7ae <main+0x316>
 79c:	2f 5f       	subi	r18, 0xFF	; 255
 79e:	20 93 ef 00 	sts	0x00EF, r18
 7a2:	05 c0       	rjmp	.+10     	; 0x7ae <main+0x316>
				}
				else {
					if( testKey(keyMENU) ) menu--;
 7a4:	83 ff       	sbrs	r24, 3
 7a6:	03 c0       	rjmp	.+6      	; 0x7ae <main+0x316>
 7a8:	21 50       	subi	r18, 0x01	; 1
 7aa:	20 93 ef 00 	sts	0x00EF, r18
		}
		
		
		//////////////////////////////////////////////////////////////////////////////
		// Update Time
		if( !rtcTimer ){
 7ae:	80 91 c8 01 	lds	r24, 0x01C8
 7b2:	81 11       	cpse	r24, r1
 7b4:	27 c0       	rjmp	.+78     	; 0x804 <main+0x36c>
			rtcTimerReset;
 7b6:	d0 92 c8 01 	sts	0x01C8, r13
			
			param[0] = 0xD0; param[1]=0;
 7ba:	b8 82       	st	Y, r11
 7bc:	f8 01       	movw	r30, r16
 7be:	10 82       	st	Z, r1
			if( IIC_read(param, 7) ){
 7c0:	67 e0       	ldi	r22, 0x07	; 7
 7c2:	ce 01       	movw	r24, r28
 7c4:	82 d1       	rcall	.+772    	; 0xaca <IIC_read>
 7c6:	88 23       	and	r24, r24
 7c8:	e9 f0       	breq	.+58     	; 0x804 <main+0x36c>
				if( dfIsReady  && (param[1]==0x00 && param[2]==0x22)) dfPlayer(0xf, 0x2, 0x1);
 7ca:	84 9b       	sbis	0x10, 4	; 16
 7cc:	0d c0       	rjmp	.+26     	; 0x7e8 <main+0x350>
 7ce:	f8 01       	movw	r30, r16
 7d0:	80 81       	ld	r24, Z
 7d2:	81 11       	cpse	r24, r1
 7d4:	09 c0       	rjmp	.+18     	; 0x7e8 <main+0x350>
 7d6:	f7 01       	movw	r30, r14
 7d8:	80 81       	ld	r24, Z
 7da:	82 32       	cpi	r24, 0x22	; 34
 7dc:	29 f4       	brne	.+10     	; 0x7e8 <main+0x350>
 7de:	41 e0       	ldi	r20, 0x01	; 1
 7e0:	62 e0       	ldi	r22, 0x02	; 2
 7e2:	8f e0       	ldi	r24, 0x0F	; 15
 7e4:	7f dc       	rcall	.-1794   	; 0xe4 <dfPlayer>
 7e6:	0e c0       	rjmp	.+28     	; 0x804 <main+0x36c>
				else if( dfIsReady  && (param[1]==0x00 && param[2]==0x08)) dfPlayer(0xf, 0x2, 0x1);
 7e8:	84 9b       	sbis	0x10, 4	; 16
 7ea:	0c c0       	rjmp	.+24     	; 0x804 <main+0x36c>
 7ec:	f8 01       	movw	r30, r16
 7ee:	80 81       	ld	r24, Z
 7f0:	81 11       	cpse	r24, r1
 7f2:	08 c0       	rjmp	.+16     	; 0x804 <main+0x36c>
 7f4:	f7 01       	movw	r30, r14
 7f6:	80 81       	ld	r24, Z
 7f8:	88 30       	cpi	r24, 0x08	; 8
 7fa:	21 f4       	brne	.+8      	; 0x804 <main+0x36c>
 7fc:	41 e0       	ldi	r20, 0x01	; 1
 7fe:	62 e0       	ldi	r22, 0x02	; 2
 800:	8f e0       	ldi	r24, 0x0F	; 15
 802:	70 dc       	rcall	.-1824   	; 0xe4 <dfPlayer>
		}
		
		
		////////////////////////////////////////////////////////////////////////////
		// Timer  - Control LCD
		if( !menuTimer ){
 804:	80 91 63 01 	lds	r24, 0x0163
 808:	81 11       	cpse	r24, r1
 80a:	50 c1       	rjmp	.+672    	; 0xaac <main+0x614>
			menuTimerReset;
 80c:	d0 92 63 01 	sts	0x0163, r13
			
			lcdClean();
 810:	81 d2       	rcall	.+1282   	; 0xd14 <lcdClean>
			// Normal Operation
			if( menu == 0 ){
 812:	80 91 ef 00 	lds	r24, 0x00EF
 816:	81 11       	cpse	r24, r1
 818:	0c c0       	rjmp	.+24     	; 0x832 <main+0x39a>
				dfPrintTime(param);
 81a:	ce 01       	movw	r24, r28
 81c:	90 dc       	rcall	.-1760   	; 0x13e <dfPrintTime>
				if( !dfIsReady ) lcdprintat(0,15,">");
 81e:	84 99       	sbic	0x10, 4	; 16
 820:	45 c1       	rjmp	.+650    	; 0xaac <main+0x614>
 822:	43 e9       	ldi	r20, 0x93	; 147
 824:	50 e0       	ldi	r21, 0x00	; 0
 826:	6f e0       	ldi	r22, 0x0F	; 15
 828:	70 e0       	ldi	r23, 0x00	; 0
 82a:	80 e0       	ldi	r24, 0x00	; 0
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	5d d2       	rcall	.+1210   	; 0xcea <lcdprintat>
 830:	3d c1       	rjmp	.+634    	; 0xaac <main+0x614>
			}
			// Main Menu
			else if( menustat && !(menu&0x0F) ){
 832:	88 20       	and	r8, r8
 834:	09 f4       	brne	.+2      	; 0x838 <main+0x3a0>
 836:	2a c1       	rjmp	.+596    	; 0xa8c <main+0x5f4>
 838:	98 2f       	mov	r25, r24
 83a:	9f 70       	andi	r25, 0x0F	; 15
 83c:	69 f5       	brne	.+90     	; 0x898 <main+0x400>
				lcdprintchar(0x7E);
 83e:	8e e7       	ldi	r24, 0x7E	; 126
 840:	4a d2       	rcall	.+1172   	; 0xcd6 <lcdprintchar>
				uint8_t id = menu>>4;
 842:	80 90 ef 00 	lds	r8, 0x00EF
 846:	86 94       	lsr	r8
 848:	86 94       	lsr	r8
 84a:	86 94       	lsr	r8
 84c:	86 94       	lsr	r8
				if( id==1 ) lcdprintat(id-1,1, "Alarm Config");
 84e:	f1 e0       	ldi	r31, 0x01	; 1
 850:	8f 12       	cpse	r8, r31
 852:	08 c0       	rjmp	.+16     	; 0x864 <main+0x3cc>
 854:	45 e9       	ldi	r20, 0x95	; 149
 856:	50 e0       	ldi	r21, 0x00	; 0
 858:	61 e0       	ldi	r22, 0x01	; 1
 85a:	70 e0       	ldi	r23, 0x00	; 0
 85c:	80 e0       	ldi	r24, 0x00	; 0
 85e:	90 e0       	ldi	r25, 0x00	; 0
 860:	44 d2       	rcall	.+1160   	; 0xcea <lcdprintat>
 862:	04 c0       	rjmp	.+8      	; 0x86c <main+0x3d4>
				if( id==1||id==2 ) lcdprintat(id-2,1, "Time Config");
 864:	88 2d       	mov	r24, r8
 866:	81 50       	subi	r24, 0x01	; 1
 868:	82 30       	cpi	r24, 0x02	; 2
 86a:	40 f4       	brcc	.+16     	; 0x87c <main+0x3e4>
 86c:	88 2d       	mov	r24, r8
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	42 ea       	ldi	r20, 0xA2	; 162
 872:	50 e0       	ldi	r21, 0x00	; 0
 874:	61 e0       	ldi	r22, 0x01	; 1
 876:	70 e0       	ldi	r23, 0x00	; 0
 878:	02 97       	sbiw	r24, 0x02	; 2
 87a:	37 d2       	rcall	.+1134   	; 0xcea <lcdprintat>
				if( id==2||id==3 ) lcdprintat(id-3,1, "Volume");
 87c:	88 2d       	mov	r24, r8
 87e:	82 50       	subi	r24, 0x02	; 2
 880:	82 30       	cpi	r24, 0x02	; 2
 882:	08 f0       	brcs	.+2      	; 0x886 <main+0x3ee>
 884:	13 c1       	rjmp	.+550    	; 0xaac <main+0x614>
 886:	88 2d       	mov	r24, r8
 888:	90 e0       	ldi	r25, 0x00	; 0
 88a:	4e ea       	ldi	r20, 0xAE	; 174
 88c:	50 e0       	ldi	r21, 0x00	; 0
 88e:	61 e0       	ldi	r22, 0x01	; 1
 890:	70 e0       	ldi	r23, 0x00	; 0
 892:	03 97       	sbiw	r24, 0x03	; 3
 894:	2a d2       	rcall	.+1108   	; 0xcea <lcdprintat>
 896:	0a c1       	rjmp	.+532    	; 0xaac <main+0x614>
			}
			// Alarm Config
			else if( menustat==1 && menu>0x10){
 898:	91 e0       	ldi	r25, 0x01	; 1
 89a:	89 12       	cpse	r8, r25
 89c:	f7 c0       	rjmp	.+494    	; 0xa8c <main+0x5f4>
 89e:	81 31       	cpi	r24, 0x11	; 17
 8a0:	08 f4       	brcc	.+2      	; 0x8a4 <main+0x40c>
 8a2:	f4 c0       	rjmp	.+488    	; 0xa8c <main+0x5f4>
				//lcdprint("Id:");		if( blinktimer>blickTimerOn || menu!=0x11 )lcdprint(toStr(AlarmId+1));
				//lcdprintat(0,6,"F:");	if( blinktimer>blickTimerOn || menu!=0x12 )lcdprint(toStr(AlarmDir[AlarmId]));
				//lcdprintat(0,11,"M:");	if( blinktimer>blickTimerOn || menu!=0x13 )lcdprint(toStr(AlarmMus[AlarmId]));
				lcdprint("Alarm Id:"); if( blinktimer>blickTimerOn || menu!=0x11 )lcdprint(toStr(AlarmId+1));
 8a4:	85 eb       	ldi	r24, 0xB5	; 181
 8a6:	90 e0       	ldi	r25, 0x00	; 0
 8a8:	00 d2       	rcall	.+1024   	; 0xcaa <lcdprint>
 8aa:	80 91 ee 00 	lds	r24, 0x00EE
 8ae:	84 30       	cpi	r24, 0x04	; 4
 8b0:	28 f4       	brcc	.+10     	; 0x8bc <main+0x424>
 8b2:	80 91 ef 00 	lds	r24, 0x00EF
 8b6:	81 31       	cpi	r24, 0x11	; 17
 8b8:	09 f4       	brne	.+2      	; 0x8bc <main+0x424>
 8ba:	92 c0       	rjmp	.+292    	; 0x9e0 <main+0x548>
 8bc:	60 91 64 01 	lds	r22, 0x0164
 8c0:	70 e0       	ldi	r23, 0x00	; 0
 8c2:	6f 5f       	subi	r22, 0xFF	; 255
 8c4:	7f 4f       	sbci	r23, 0xFF	; 255
 8c6:	88 27       	eor	r24, r24
 8c8:	77 fd       	sbrc	r23, 7
 8ca:	80 95       	com	r24
 8cc:	98 2f       	mov	r25, r24
 8ce:	a3 d1       	rcall	.+838    	; 0xc16 <toStr>
 8d0:	ec d1       	rcall	.+984    	; 0xcaa <lcdprint>
				if( menu == 0x12 ){ lcdprintat(1,0,"Folder "); if( blinktimer>blickTimerOn )lcdprint(toStr(AlarmDir[AlarmId])); }
 8d2:	80 91 ef 00 	lds	r24, 0x00EF
 8d6:	82 31       	cpi	r24, 0x12	; 18
 8d8:	c1 f4       	brne	.+48     	; 0x90a <main+0x472>
 8da:	4f eb       	ldi	r20, 0xBF	; 191
 8dc:	50 e0       	ldi	r21, 0x00	; 0
 8de:	60 e0       	ldi	r22, 0x00	; 0
 8e0:	70 e0       	ldi	r23, 0x00	; 0
 8e2:	81 e0       	ldi	r24, 0x01	; 1
 8e4:	90 e0       	ldi	r25, 0x00	; 0
 8e6:	01 d2       	rcall	.+1026   	; 0xcea <lcdprintat>
 8e8:	80 91 ee 00 	lds	r24, 0x00EE
 8ec:	84 30       	cpi	r24, 0x04	; 4
 8ee:	08 f4       	brcc	.+2      	; 0x8f2 <main+0x45a>
 8f0:	dd c0       	rjmp	.+442    	; 0xaac <main+0x614>
 8f2:	e0 91 64 01 	lds	r30, 0x0164
 8f6:	f0 e0       	ldi	r31, 0x00	; 0
 8f8:	ee 56       	subi	r30, 0x6E	; 110
 8fa:	fd 4f       	sbci	r31, 0xFD	; 253
 8fc:	60 81       	ld	r22, Z
 8fe:	70 e0       	ldi	r23, 0x00	; 0
 900:	80 e0       	ldi	r24, 0x00	; 0
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	88 d1       	rcall	.+784    	; 0xc16 <toStr>
 906:	d1 d1       	rcall	.+930    	; 0xcaa <lcdprint>
 908:	d1 c0       	rjmp	.+418    	; 0xaac <main+0x614>
				else if( menu == 0x13 ){ lcdprintat(1,0,"Music "); if( blinktimer>blickTimerOn )lcdprint(toStr(AlarmMus[AlarmId])); }
 90a:	83 31       	cpi	r24, 0x13	; 19
 90c:	c1 f4       	brne	.+48     	; 0x93e <main+0x4a6>
 90e:	47 ec       	ldi	r20, 0xC7	; 199
 910:	50 e0       	ldi	r21, 0x00	; 0
 912:	60 e0       	ldi	r22, 0x00	; 0
 914:	70 e0       	ldi	r23, 0x00	; 0
 916:	81 e0       	ldi	r24, 0x01	; 1
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	e7 d1       	rcall	.+974    	; 0xcea <lcdprintat>
 91c:	80 91 ee 00 	lds	r24, 0x00EE
 920:	84 30       	cpi	r24, 0x04	; 4
 922:	08 f4       	brcc	.+2      	; 0x926 <main+0x48e>
 924:	c3 c0       	rjmp	.+390    	; 0xaac <main+0x614>
 926:	e0 91 64 01 	lds	r30, 0x0164
 92a:	f0 e0       	ldi	r31, 0x00	; 0
 92c:	e2 5d       	subi	r30, 0xD2	; 210
 92e:	fd 4f       	sbci	r31, 0xFD	; 253
 930:	60 81       	ld	r22, Z
 932:	70 e0       	ldi	r23, 0x00	; 0
 934:	80 e0       	ldi	r24, 0x00	; 0
 936:	90 e0       	ldi	r25, 0x00	; 0
 938:	6e d1       	rcall	.+732    	; 0xc16 <toStr>
 93a:	b7 d1       	rcall	.+878    	; 0xcaa <lcdprint>
 93c:	b7 c0       	rjmp	.+366    	; 0xaac <main+0x614>
				else if( menu == 0x14 || menu == 0x15){ 
 93e:	98 2f       	mov	r25, r24
 940:	94 51       	subi	r25, 0x14	; 20
 942:	92 30       	cpi	r25, 0x02	; 2
 944:	08 f0       	brcs	.+2      	; 0x948 <main+0x4b0>
 946:	4c c0       	rjmp	.+152    	; 0x9e0 <main+0x548>
					lcdprintat(1,0,"Time H");
 948:	4e ec       	ldi	r20, 0xCE	; 206
 94a:	50 e0       	ldi	r21, 0x00	; 0
 94c:	60 e0       	ldi	r22, 0x00	; 0
 94e:	70 e0       	ldi	r23, 0x00	; 0
 950:	81 e0       	ldi	r24, 0x01	; 1
 952:	90 e0       	ldi	r25, 0x00	; 0
 954:	ca d1       	rcall	.+916    	; 0xcea <lcdprintat>
					if( blinktimer>blickTimerOn || menu!=0x14 ){ //lcdWrite(0xC1); _delay_us(50);
 956:	80 91 ee 00 	lds	r24, 0x00EE
 95a:	84 30       	cpi	r24, 0x04	; 4
 95c:	20 f4       	brcc	.+8      	; 0x966 <main+0x4ce>
 95e:	80 91 ef 00 	lds	r24, 0x00EF
 962:	84 31       	cpi	r24, 0x14	; 20
 964:	b1 f0       	breq	.+44     	; 0x992 <main+0x4fa>
						if( AlarmHor[AlarmId] < 10) lcdprint("0"); lcdprint(toStr(AlarmHor[AlarmId]));
 966:	e0 91 64 01 	lds	r30, 0x0164
 96a:	f0 e0       	ldi	r31, 0x00	; 0
 96c:	e1 50       	subi	r30, 0x01	; 1
 96e:	ff 4f       	sbci	r31, 0xFF	; 255
 970:	80 81       	ld	r24, Z
 972:	8a 30       	cpi	r24, 0x0A	; 10
 974:	18 f4       	brcc	.+6      	; 0x97c <main+0x4e4>
 976:	85 ed       	ldi	r24, 0xD5	; 213
 978:	90 e0       	ldi	r25, 0x00	; 0
 97a:	97 d1       	rcall	.+814    	; 0xcaa <lcdprint>
 97c:	e0 91 64 01 	lds	r30, 0x0164
 980:	f0 e0       	ldi	r31, 0x00	; 0
 982:	e1 50       	subi	r30, 0x01	; 1
 984:	ff 4f       	sbci	r31, 0xFF	; 255
 986:	60 81       	ld	r22, Z
 988:	70 e0       	ldi	r23, 0x00	; 0
 98a:	80 e0       	ldi	r24, 0x00	; 0
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	43 d1       	rcall	.+646    	; 0xc16 <toStr>
 990:	8c d1       	rcall	.+792    	; 0xcaa <lcdprint>
					}
					lcdprintat(1,9,"M");
 992:	47 ed       	ldi	r20, 0xD7	; 215
 994:	50 e0       	ldi	r21, 0x00	; 0
 996:	69 e0       	ldi	r22, 0x09	; 9
 998:	70 e0       	ldi	r23, 0x00	; 0
 99a:	81 e0       	ldi	r24, 0x01	; 1
 99c:	90 e0       	ldi	r25, 0x00	; 0
 99e:	a5 d1       	rcall	.+842    	; 0xcea <lcdprintat>
					if( blinktimer>blickTimerOn || menu!=0x15 ){ //lcdWrite(0xC4); _delay_us(50);
 9a0:	80 91 ee 00 	lds	r24, 0x00EE
 9a4:	84 30       	cpi	r24, 0x04	; 4
 9a6:	28 f4       	brcc	.+10     	; 0x9b2 <main+0x51a>
 9a8:	80 91 ef 00 	lds	r24, 0x00EF
 9ac:	85 31       	cpi	r24, 0x15	; 21
 9ae:	09 f4       	brne	.+2      	; 0x9b2 <main+0x51a>
 9b0:	7d c0       	rjmp	.+250    	; 0xaac <main+0x614>
						if( AlarmMin[AlarmId] < 10) lcdprint("0"); lcdprint(toStr(AlarmMin[AlarmId]));
 9b2:	e0 91 64 01 	lds	r30, 0x0164
 9b6:	f0 e0       	ldi	r31, 0x00	; 0
 9b8:	e7 53       	subi	r30, 0x37	; 55
 9ba:	fe 4f       	sbci	r31, 0xFE	; 254
 9bc:	80 81       	ld	r24, Z
 9be:	8a 30       	cpi	r24, 0x0A	; 10
 9c0:	18 f4       	brcc	.+6      	; 0x9c8 <main+0x530>
 9c2:	85 ed       	ldi	r24, 0xD5	; 213
 9c4:	90 e0       	ldi	r25, 0x00	; 0
 9c6:	71 d1       	rcall	.+738    	; 0xcaa <lcdprint>
 9c8:	e0 91 64 01 	lds	r30, 0x0164
 9cc:	f0 e0       	ldi	r31, 0x00	; 0
 9ce:	e7 53       	subi	r30, 0x37	; 55
 9d0:	fe 4f       	sbci	r31, 0xFE	; 254
 9d2:	60 81       	ld	r22, Z
 9d4:	70 e0       	ldi	r23, 0x00	; 0
 9d6:	80 e0       	ldi	r24, 0x00	; 0
 9d8:	90 e0       	ldi	r25, 0x00	; 0
 9da:	1d d1       	rcall	.+570    	; 0xc16 <toStr>
 9dc:	66 d1       	rcall	.+716    	; 0xcaa <lcdprint>
 9de:	66 c0       	rjmp	.+204    	; 0xaac <main+0x614>
					}
				}
				else if( menu == 0x16 || menu == 0x17 ){
 9e0:	86 51       	subi	r24, 0x16	; 22
 9e2:	82 30       	cpi	r24, 0x02	; 2
 9e4:	08 f0       	brcs	.+2      	; 0x9e8 <main+0x550>
 9e6:	62 c0       	rjmp	.+196    	; 0xaac <main+0x614>
					uint8_t day = AlarmDayDat[AlarmId]>>5;
 9e8:	e0 91 64 01 	lds	r30, 0x0164
 9ec:	f0 e0       	ldi	r31, 0x00	; 0
 9ee:	eb 59       	subi	r30, 0x9B	; 155
 9f0:	fe 4f       	sbci	r31, 0xFE	; 254
 9f2:	80 80       	ld	r8, Z
 9f4:	78 2c       	mov	r7, r8
 9f6:	76 94       	lsr	r7
 9f8:	76 94       	lsr	r7
 9fa:	76 94       	lsr	r7
 9fc:	76 94       	lsr	r7
 9fe:	76 94       	lsr	r7
					uint8_t data = AlarmDayDat[AlarmId]&0x1F;
					lcdprintat(1,0,"Day ");
 a00:	49 ed       	ldi	r20, 0xD9	; 217
 a02:	50 e0       	ldi	r21, 0x00	; 0
 a04:	60 e0       	ldi	r22, 0x00	; 0
 a06:	70 e0       	ldi	r23, 0x00	; 0
 a08:	81 e0       	ldi	r24, 0x01	; 1
 a0a:	90 e0       	ldi	r25, 0x00	; 0
 a0c:	6e d1       	rcall	.+732    	; 0xcea <lcdprintat>
					if( blinktimer>blickTimerOn || menu!=0x16 ) lcdprintDay(day);
 a0e:	80 91 ee 00 	lds	r24, 0x00EE
 a12:	84 30       	cpi	r24, 0x04	; 4
 a14:	20 f4       	brcc	.+8      	; 0xa1e <main+0x586>
 a16:	80 91 ef 00 	lds	r24, 0x00EF
 a1a:	86 31       	cpi	r24, 0x16	; 22
 a1c:	11 f0       	breq	.+4      	; 0xa22 <main+0x58a>
 a1e:	87 2d       	mov	r24, r7
 a20:	cb db       	rcall	.-2154   	; 0x1b8 <lcdprintDay>
					if( !day ){
 a22:	71 10       	cpse	r7, r1
 a24:	43 c0       	rjmp	.+134    	; 0xaac <main+0x614>
						if( AlarmMin[AlarmId] < 10) lcdprint("0"); lcdprint(toStr(AlarmMin[AlarmId]));
					}
				}
				else if( menu == 0x16 || menu == 0x17 ){
					uint8_t day = AlarmDayDat[AlarmId]>>5;
					uint8_t data = AlarmDayDat[AlarmId]&0x1F;
 a26:	ef e1       	ldi	r30, 0x1F	; 31
 a28:	8e 22       	and	r8, r30
					lcdprintat(1,0,"Day ");
					if( blinktimer>blickTimerOn || menu!=0x16 ) lcdprintDay(day);
					if( !day ){
						lcdprintat(1,8,"");
 a2a:	4c ee       	ldi	r20, 0xEC	; 236
 a2c:	50 e0       	ldi	r21, 0x00	; 0
 a2e:	68 e0       	ldi	r22, 0x08	; 8
 a30:	70 e0       	ldi	r23, 0x00	; 0
 a32:	81 e0       	ldi	r24, 0x01	; 1
 a34:	90 e0       	ldi	r25, 0x00	; 0
 a36:	59 d1       	rcall	.+690    	; 0xcea <lcdprintat>
						if( !data && (blinktimer>blickTimerOn || menu!=0x17) ) lcdprint("--");
 a38:	81 10       	cpse	r8, r1
 a3a:	0c c0       	rjmp	.+24     	; 0xa54 <main+0x5bc>
 a3c:	80 91 ee 00 	lds	r24, 0x00EE
 a40:	84 30       	cpi	r24, 0x04	; 4
 a42:	20 f4       	brcc	.+8      	; 0xa4c <main+0x5b4>
 a44:	80 91 ef 00 	lds	r24, 0x00EF
 a48:	87 31       	cpi	r24, 0x17	; 23
 a4a:	c1 f0       	breq	.+48     	; 0xa7c <main+0x5e4>
 a4c:	8e ed       	ldi	r24, 0xDE	; 222
 a4e:	90 e0       	ldi	r25, 0x00	; 0
 a50:	2c d1       	rcall	.+600    	; 0xcaa <lcdprint>
 a52:	14 c0       	rjmp	.+40     	; 0xa7c <main+0x5e4>
						else if(blinktimer>blickTimerOn || menu!=0x17){ if( data<10 ) lcdprint("0"); lcdprint(toStr(data)); }
 a54:	80 91 ee 00 	lds	r24, 0x00EE
 a58:	84 30       	cpi	r24, 0x04	; 4
 a5a:	20 f4       	brcc	.+8      	; 0xa64 <main+0x5cc>
 a5c:	80 91 ef 00 	lds	r24, 0x00EF
 a60:	87 31       	cpi	r24, 0x17	; 23
 a62:	61 f0       	breq	.+24     	; 0xa7c <main+0x5e4>
 a64:	f9 e0       	ldi	r31, 0x09	; 9
 a66:	f8 15       	cp	r31, r8
 a68:	18 f0       	brcs	.+6      	; 0xa70 <main+0x5d8>
 a6a:	85 ed       	ldi	r24, 0xD5	; 213
 a6c:	90 e0       	ldi	r25, 0x00	; 0
 a6e:	1d d1       	rcall	.+570    	; 0xcaa <lcdprint>
 a70:	68 2d       	mov	r22, r8
 a72:	70 e0       	ldi	r23, 0x00	; 0
 a74:	80 e0       	ldi	r24, 0x00	; 0
 a76:	90 e0       	ldi	r25, 0x00	; 0
 a78:	ce d0       	rcall	.+412    	; 0xc16 <toStr>
 a7a:	17 d1       	rcall	.+558    	; 0xcaa <lcdprint>
						lcdprintat(1,10,"/");
 a7c:	41 ee       	ldi	r20, 0xE1	; 225
 a7e:	50 e0       	ldi	r21, 0x00	; 0
 a80:	6a e0       	ldi	r22, 0x0A	; 10
 a82:	70 e0       	ldi	r23, 0x00	; 0
 a84:	81 e0       	ldi	r24, 0x01	; 1
 a86:	90 e0       	ldi	r25, 0x00	; 0
 a88:	30 d1       	rcall	.+608    	; 0xcea <lcdprintat>
 a8a:	10 c0       	rjmp	.+32     	; 0xaac <main+0x614>
					}
				}
			}
			// Volume
			else if( menu==0x31 ){
 a8c:	81 33       	cpi	r24, 0x31	; 49
 a8e:	71 f4       	brne	.+28     	; 0xaac <main+0x614>
				lcdprint("Volume = ");
 a90:	83 ee       	ldi	r24, 0xE3	; 227
 a92:	90 e0       	ldi	r25, 0x00	; 0
 a94:	0a d1       	rcall	.+532    	; 0xcaa <lcdprint>
				if( blinktimer>blickTimerOn ) lcdprint(toStr(dfVolume));
 a96:	80 91 ee 00 	lds	r24, 0x00EE
 a9a:	84 30       	cpi	r24, 0x04	; 4
 a9c:	38 f0       	brcs	.+14     	; 0xaac <main+0x614>
 a9e:	60 91 2c 02 	lds	r22, 0x022C
 aa2:	70 e0       	ldi	r23, 0x00	; 0
 aa4:	80 e0       	ldi	r24, 0x00	; 0
 aa6:	90 e0       	ldi	r25, 0x00	; 0
 aa8:	b6 d0       	rcall	.+364    	; 0xc16 <toStr>
 aaa:	ff d0       	rcall	.+510    	; 0xcaa <lcdprint>
		}
		
		////////////////////////////////////
		// after main routine
		
		keys = 0;			// reset keys
 aac:	10 92 f5 02 	sts	0x02F5, r1
    }
 ab0:	13 cd       	rjmp	.-1498   	; 0x4d8 <main+0x40>
						menu &= 0xF0;
					}
				}
			}
			// Menu Volume
			else if( menu == 0x31){
 ab2:	21 33       	cpi	r18, 0x31	; 49
 ab4:	09 f0       	breq	.+2      	; 0xab8 <main+0x620>
 ab6:	56 ce       	rjmp	.-852    	; 0x764 <main+0x2cc>
 ab8:	2e ce       	rjmp	.-932    	; 0x716 <main+0x27e>

00000aba <IIC_init>:
#include "IIC.h"

void IIC_init(){
	// Frequency = CPU Clock / ( 16 + (2*TWBR) * (Prescaller) )
	
	TWSR = 0x00;		// Prescaller	= 1
 aba:	11 b8       	out	0x01, r1	; 1
	TWBR = 0x0C;		// Bit Rate		= 12
 abc:	8c e0       	ldi	r24, 0x0C	; 12
 abe:	80 b9       	out	0x00, r24	; 0
	
	// master
	TWAR = 0xFF;
 ac0:	8f ef       	ldi	r24, 0xFF	; 255
 ac2:	82 b9       	out	0x02, r24	; 2
	TWCR = (1<<TWEN);
 ac4:	84 e0       	ldi	r24, 0x04	; 4
 ac6:	86 bf       	out	0x36, r24	; 54
 ac8:	08 95       	ret

00000aca <IIC_read>:


uint8_t IIC_read(uint8_t *buff, uint8_t length){
	int timeout = 1000;
	
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTA);									// send Start
 aca:	24 ea       	ldi	r18, 0xA4	; 164
 acc:	26 bf       	out	0x36, r18	; 54
	while ((TWCR & (1<<TWINT)) == 0)if( --timeout <= 0 ) return 0;			// wait start
 ace:	28 ee       	ldi	r18, 0xE8	; 232
 ad0:	33 e0       	ldi	r19, 0x03	; 3
 ad2:	04 c0       	rjmp	.+8      	; 0xadc <IIC_read+0x12>
 ad4:	21 50       	subi	r18, 0x01	; 1
 ad6:	31 09       	sbc	r19, r1
 ad8:	09 f4       	brne	.+2      	; 0xadc <IIC_read+0x12>
 ada:	4b c0       	rjmp	.+150    	; 0xb72 <IIC_read+0xa8>
 adc:	06 b6       	in	r0, 0x36	; 54
 ade:	07 fe       	sbrs	r0, 7
 ae0:	f9 cf       	rjmp	.-14     	; 0xad4 <IIC_read+0xa>
	
	// Write Mode
	TWDR = buff[0]&0xFE;													// device Adr (Write)
 ae2:	fc 01       	movw	r30, r24
 ae4:	20 81       	ld	r18, Z
 ae6:	2e 7f       	andi	r18, 0xFE	; 254
 ae8:	23 b9       	out	0x03, r18	; 3
	TWCR = (1<<TWINT)|(1<<TWEN);											// send
 aea:	24 e8       	ldi	r18, 0x84	; 132
 aec:	26 bf       	out	0x36, r18	; 54
	while ((TWCR & (1<<TWINT)) == 0);										// wait
 aee:	06 b6       	in	r0, 0x36	; 54
 af0:	07 fe       	sbrs	r0, 7
 af2:	fd cf       	rjmp	.-6      	; 0xaee <IIC_read+0x24>
	if( TWSR & 0x18 ){														// ACK received
 af4:	21 b1       	in	r18, 0x01	; 1
 af6:	28 71       	andi	r18, 0x18	; 24
 af8:	09 f4       	brne	.+2      	; 0xafc <IIC_read+0x32>
 afa:	3d c0       	rjmp	.+122    	; 0xb76 <IIC_read+0xac>
		TWDR = buff[1];														// Reg adr
 afc:	fc 01       	movw	r30, r24
 afe:	21 81       	ldd	r18, Z+1	; 0x01
 b00:	23 b9       	out	0x03, r18	; 3
		TWCR = (1<<TWINT)|(1<<TWEN);										// send
 b02:	24 e8       	ldi	r18, 0x84	; 132
 b04:	26 bf       	out	0x36, r18	; 54
		
		// set adr for read
		while ((TWCR & (1<<TWINT)) == 0);									// wait ack
 b06:	06 b6       	in	r0, 0x36	; 54
 b08:	07 fe       	sbrs	r0, 7
 b0a:	fd cf       	rjmp	.-6      	; 0xb06 <IIC_read+0x3c>
		if( TWSR & 0x28)													// ack returned
 b0c:	21 b1       	in	r18, 0x01	; 1
 b0e:	28 72       	andi	r18, 0x28	; 40
 b10:	a1 f1       	breq	.+104    	; 0xb7a <IIC_read+0xb0>
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTA);							// Restart for read
 b12:	24 ea       	ldi	r18, 0xA4	; 164
 b14:	26 bf       	out	0x36, r18	; 54
		else return 0;
		
		// Read Mode
		while ((TWCR & (1<<TWINT)) == 0);									// wait
 b16:	06 b6       	in	r0, 0x36	; 54
 b18:	07 fe       	sbrs	r0, 7
 b1a:	fd cf       	rjmp	.-6      	; 0xb16 <IIC_read+0x4c>
		TWDR = buff[0] | 0x01;												// device Adr (Read)
 b1c:	fc 01       	movw	r30, r24
 b1e:	20 81       	ld	r18, Z
 b20:	21 60       	ori	r18, 0x01	; 1
 b22:	23 b9       	out	0x03, r18	; 3
		TWCR = (1<<TWINT)|(1<<TWEN);										// send
 b24:	24 e8       	ldi	r18, 0x84	; 132
 b26:	26 bf       	out	0x36, r18	; 54
		
		while ((TWCR & (1<<TWINT)) == 0);									// wait
 b28:	06 b6       	in	r0, 0x36	; 54
 b2a:	07 fe       	sbrs	r0, 7
 b2c:	fd cf       	rjmp	.-6      	; 0xb28 <IIC_read+0x5e>
		if( TWSR & 0x40 ){													// ACK received
 b2e:	0e 9b       	sbis	0x01, 6	; 1
 b30:	26 c0       	rjmp	.+76     	; 0xb7e <IIC_read+0xb4>
			//if( length > 1 )TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);							// send
			//else TWCR = (1<<TWINT)|(1<<TWEN);
			
			for( uint8_t index=0; index < length; index++ ){
 b32:	66 23       	and	r22, r22
 b34:	d1 f0       	breq	.+52     	; 0xb6a <IIC_read+0xa0>
 b36:	fc 01       	movw	r30, r24
 b38:	20 e0       	ldi	r18, 0x00	; 0
 b3a:	30 e0       	ldi	r19, 0x00	; 0
				if( index < length-1 )TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);							// send
 b3c:	86 2f       	mov	r24, r22
 b3e:	90 e0       	ldi	r25, 0x00	; 0
 b40:	01 97       	sbiw	r24, 0x01	; 1
				else TWCR = (1<<TWINT)|(1<<TWEN);
 b42:	74 e8       	ldi	r23, 0x84	; 132
		if( TWSR & 0x40 ){													// ACK received
			//if( length > 1 )TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);							// send
			//else TWCR = (1<<TWINT)|(1<<TWEN);
			
			for( uint8_t index=0; index < length; index++ ){
				if( index < length-1 )TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);							// send
 b44:	54 ec       	ldi	r21, 0xC4	; 196
 b46:	28 17       	cp	r18, r24
 b48:	39 07       	cpc	r19, r25
 b4a:	14 f4       	brge	.+4      	; 0xb50 <IIC_read+0x86>
 b4c:	56 bf       	out	0x36, r21	; 54
 b4e:	01 c0       	rjmp	.+2      	; 0xb52 <IIC_read+0x88>
				else TWCR = (1<<TWINT)|(1<<TWEN);
 b50:	76 bf       	out	0x36, r23	; 54
				
				while ((TWCR & (1<<TWINT)) == 0);
 b52:	06 b6       	in	r0, 0x36	; 54
 b54:	07 fe       	sbrs	r0, 7
 b56:	fd cf       	rjmp	.-6      	; 0xb52 <IIC_read+0x88>
				if( TWSR & 0x50){												// ack returned
 b58:	41 b1       	in	r20, 0x01	; 1
 b5a:	40 75       	andi	r20, 0x50	; 80
 b5c:	91 f0       	breq	.+36     	; 0xb82 <IIC_read+0xb8>
					buff[index] = TWDR;											// next byte
 b5e:	43 b1       	in	r20, 0x03	; 3
 b60:	41 93       	st	Z+, r20
 b62:	2f 5f       	subi	r18, 0xFF	; 255
 b64:	3f 4f       	sbci	r19, 0xFF	; 255
		while ((TWCR & (1<<TWINT)) == 0);									// wait
		if( TWSR & 0x40 ){													// ACK received
			//if( length > 1 )TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);							// send
			//else TWCR = (1<<TWINT)|(1<<TWEN);
			
			for( uint8_t index=0; index < length; index++ ){
 b66:	26 17       	cp	r18, r22
 b68:	70 f3       	brcs	.-36     	; 0xb46 <IIC_read+0x7c>
					//if(index < length-2 && length > 1) TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
					//else TWCR = (1<<TWINT)|(1<<TWEN);
				}
				else return 0;
			}
			TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
 b6a:	84 e9       	ldi	r24, 0x94	; 148
 b6c:	86 bf       	out	0x36, r24	; 54
			return 1;
 b6e:	81 e0       	ldi	r24, 0x01	; 1
 b70:	08 95       	ret

uint8_t IIC_read(uint8_t *buff, uint8_t length){
	int timeout = 1000;
	
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTA);									// send Start
	while ((TWCR & (1<<TWINT)) == 0)if( --timeout <= 0 ) return 0;			// wait start
 b72:	80 e0       	ldi	r24, 0x00	; 0
 b74:	08 95       	ret
			}
			TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
			return 1;
		}
	}
	return 0;
 b76:	80 e0       	ldi	r24, 0x00	; 0
 b78:	08 95       	ret
		
		// set adr for read
		while ((TWCR & (1<<TWINT)) == 0);									// wait ack
		if( TWSR & 0x28)													// ack returned
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTA);							// Restart for read
		else return 0;
 b7a:	80 e0       	ldi	r24, 0x00	; 0
 b7c:	08 95       	ret
			}
			TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
			return 1;
		}
	}
	return 0;
 b7e:	80 e0       	ldi	r24, 0x00	; 0
 b80:	08 95       	ret
				if( TWSR & 0x50){												// ack returned
					buff[index] = TWDR;											// next byte
					//if(index < length-2 && length > 1) TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
					//else TWCR = (1<<TWINT)|(1<<TWEN);
				}
				else return 0;
 b82:	80 e0       	ldi	r24, 0x00	; 0
			TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
			return 1;
		}
	}
	return 0;
}
 b84:	08 95       	ret

00000b86 <lcdWrite>:

#include "LCD.h"

void lcdWrite(char byte){
	
	lcdBus &= 0xF0;
 b86:	98 b3       	in	r25, 0x18	; 24
 b88:	90 7f       	andi	r25, 0xF0	; 240
 b8a:	98 bb       	out	0x18, r25	; 24
	lcdBus |= (0x0F&(byte>>4));
 b8c:	98 b3       	in	r25, 0x18	; 24
 b8e:	28 2f       	mov	r18, r24
 b90:	22 95       	swap	r18
 b92:	2f 70       	andi	r18, 0x0F	; 15
 b94:	92 2b       	or	r25, r18
 b96:	98 bb       	out	0x18, r25	; 24
	setbit(lcdControl, lcdE);
 b98:	c4 9a       	sbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 b9a:	95 e0       	ldi	r25, 0x05	; 5
 b9c:	9a 95       	dec	r25
 b9e:	f1 f7       	brne	.-4      	; 0xb9c <lcdWrite+0x16>
 ba0:	00 00       	nop
	_delay_us(1);
	clearbit(lcdControl, lcdE);
 ba2:	c4 98       	cbi	0x18, 4	; 24
	
	lcdBus &= 0xF0;
 ba4:	98 b3       	in	r25, 0x18	; 24
 ba6:	90 7f       	andi	r25, 0xF0	; 240
 ba8:	98 bb       	out	0x18, r25	; 24
	lcdBus |= (0x0F&byte);
 baa:	98 b3       	in	r25, 0x18	; 24
 bac:	8f 70       	andi	r24, 0x0F	; 15
 bae:	89 2b       	or	r24, r25
 bb0:	88 bb       	out	0x18, r24	; 24
	setbit(lcdControl, lcdE);
 bb2:	c4 9a       	sbi	0x18, 4	; 24
 bb4:	85 e0       	ldi	r24, 0x05	; 5
 bb6:	8a 95       	dec	r24
 bb8:	f1 f7       	brne	.-4      	; 0xbb6 <lcdWrite+0x30>
 bba:	00 00       	nop
	_delay_us(1);
	clearbit(lcdControl, lcdE);
 bbc:	c4 98       	cbi	0x18, 4	; 24
 bbe:	08 95       	ret

00000bc0 <Exp>:
	
}


uint32_t Exp(uint8_t pot){
 bc0:	0f 93       	push	r16
 bc2:	1f 93       	push	r17
 bc4:	48 2f       	mov	r20, r24
	uint32_t exp = 1;
	while( pot > 0 ){ exp *= 10; pot--;}
 bc6:	88 23       	and	r24, r24
 bc8:	d9 f0       	breq	.+54     	; 0xc00 <Exp+0x40>
	
}


uint32_t Exp(uint8_t pot){
	uint32_t exp = 1;
 bca:	01 e0       	ldi	r16, 0x01	; 1
 bcc:	10 e0       	ldi	r17, 0x00	; 0
 bce:	20 e0       	ldi	r18, 0x00	; 0
 bd0:	30 e0       	ldi	r19, 0x00	; 0
	while( pot > 0 ){ exp *= 10; pot--;}
 bd2:	d9 01       	movw	r26, r18
 bd4:	c8 01       	movw	r24, r16
 bd6:	88 0f       	add	r24, r24
 bd8:	99 1f       	adc	r25, r25
 bda:	aa 1f       	adc	r26, r26
 bdc:	bb 1f       	adc	r27, r27
 bde:	8c 01       	movw	r16, r24
 be0:	9d 01       	movw	r18, r26
 be2:	00 0f       	add	r16, r16
 be4:	11 1f       	adc	r17, r17
 be6:	22 1f       	adc	r18, r18
 be8:	33 1f       	adc	r19, r19
 bea:	00 0f       	add	r16, r16
 bec:	11 1f       	adc	r17, r17
 bee:	22 1f       	adc	r18, r18
 bf0:	33 1f       	adc	r19, r19
 bf2:	08 0f       	add	r16, r24
 bf4:	19 1f       	adc	r17, r25
 bf6:	2a 1f       	adc	r18, r26
 bf8:	3b 1f       	adc	r19, r27
 bfa:	41 50       	subi	r20, 0x01	; 1
 bfc:	51 f7       	brne	.-44     	; 0xbd2 <Exp+0x12>
 bfe:	04 c0       	rjmp	.+8      	; 0xc08 <Exp+0x48>
	
}


uint32_t Exp(uint8_t pot){
	uint32_t exp = 1;
 c00:	01 e0       	ldi	r16, 0x01	; 1
 c02:	10 e0       	ldi	r17, 0x00	; 0
 c04:	20 e0       	ldi	r18, 0x00	; 0
 c06:	30 e0       	ldi	r19, 0x00	; 0
	while( pot > 0 ){ exp *= 10; pot--;}
	return exp;
}
 c08:	60 2f       	mov	r22, r16
 c0a:	71 2f       	mov	r23, r17
 c0c:	82 2f       	mov	r24, r18
 c0e:	93 2f       	mov	r25, r19
 c10:	1f 91       	pop	r17
 c12:	0f 91       	pop	r16
 c14:	08 95       	ret

00000c16 <toStr>:

char *toStr(uint32_t value){
 c16:	bf 92       	push	r11
 c18:	cf 92       	push	r12
 c1a:	df 92       	push	r13
 c1c:	ef 92       	push	r14
 c1e:	ff 92       	push	r15
 c20:	0f 93       	push	r16
 c22:	1f 93       	push	r17
 c24:	cf 93       	push	r28
 c26:	df 93       	push	r29
 c28:	6b 01       	movw	r12, r22
 c2a:	7c 01       	movw	r14, r24
 c2c:	15 e0       	ldi	r17, 0x05	; 5
	uint8_t index = 0;
 c2e:	00 e0       	ldi	r16, 0x00	; 0
		uint32_t temp = Exp(5-i);
		if( value >= temp ){
			strtemp[index++] = (value/temp)+0x30;
			value = value % temp;
		}
		else if( index > 0) strtemp[index++] = '0';
 c30:	0f 2e       	mov	r0, r31
 c32:	f0 e3       	ldi	r31, 0x30	; 48
 c34:	bf 2e       	mov	r11, r31
 c36:	f0 2d       	mov	r31, r0
}

char *toStr(uint32_t value){
	uint8_t index = 0;
	for(uint8_t i=0; i<6; i++){
		uint32_t temp = Exp(5-i);
 c38:	81 2f       	mov	r24, r17
 c3a:	c2 df       	rcall	.-124    	; 0xbc0 <Exp>
 c3c:	9b 01       	movw	r18, r22
 c3e:	ac 01       	movw	r20, r24
		if( value >= temp ){
 c40:	c6 16       	cp	r12, r22
 c42:	d7 06       	cpc	r13, r23
 c44:	e8 06       	cpc	r14, r24
 c46:	f9 06       	cpc	r15, r25
 c48:	78 f0       	brcs	.+30     	; 0xc68 <toStr+0x52>
			strtemp[index++] = (value/temp)+0x30;
 c4a:	c0 2f       	mov	r28, r16
 c4c:	d0 e0       	ldi	r29, 0x00	; 0
 c4e:	c0 51       	subi	r28, 0x10	; 16
 c50:	df 4f       	sbci	r29, 0xFF	; 255
 c52:	c7 01       	movw	r24, r14
 c54:	b6 01       	movw	r22, r12
 c56:	c7 d0       	rcall	.+398    	; 0xde6 <__udivmodsi4>
 c58:	20 5d       	subi	r18, 0xD0	; 208
 c5a:	28 83       	st	Y, r18
 c5c:	0f 5f       	subi	r16, 0xFF	; 255
			value = value % temp;
 c5e:	c6 2e       	mov	r12, r22
 c60:	d7 2e       	mov	r13, r23
 c62:	e8 2e       	mov	r14, r24
 c64:	f9 2e       	mov	r15, r25
 c66:	08 c0       	rjmp	.+16     	; 0xc78 <toStr+0x62>
		}
		else if( index > 0) strtemp[index++] = '0';
 c68:	00 23       	and	r16, r16
 c6a:	31 f0       	breq	.+12     	; 0xc78 <toStr+0x62>
 c6c:	e0 2f       	mov	r30, r16
 c6e:	f0 e0       	ldi	r31, 0x00	; 0
 c70:	e0 51       	subi	r30, 0x10	; 16
 c72:	ff 4f       	sbci	r31, 0xFF	; 255
 c74:	b0 82       	st	Z, r11
 c76:	0f 5f       	subi	r16, 0xFF	; 255
 c78:	11 50       	subi	r17, 0x01	; 1
 c7a:	f0 f6       	brcc	.-68     	; 0xc38 <toStr+0x22>
	}
	if( index == 0 ) strtemp[index++] = '0';
 c7c:	01 11       	cpse	r16, r1
 c7e:	04 c0       	rjmp	.+8      	; 0xc88 <toStr+0x72>
 c80:	80 e3       	ldi	r24, 0x30	; 48
 c82:	80 93 f0 00 	sts	0x00F0, r24
 c86:	01 e0       	ldi	r16, 0x01	; 1
	strtemp[index] = '\0';
 c88:	e0 2f       	mov	r30, r16
 c8a:	f0 e0       	ldi	r31, 0x00	; 0
 c8c:	e0 51       	subi	r30, 0x10	; 16
 c8e:	ff 4f       	sbci	r31, 0xFF	; 255
 c90:	10 82       	st	Z, r1
	return strtemp;
}
 c92:	80 ef       	ldi	r24, 0xF0	; 240
 c94:	90 e0       	ldi	r25, 0x00	; 0
 c96:	df 91       	pop	r29
 c98:	cf 91       	pop	r28
 c9a:	1f 91       	pop	r17
 c9c:	0f 91       	pop	r16
 c9e:	ff 90       	pop	r15
 ca0:	ef 90       	pop	r14
 ca2:	df 90       	pop	r13
 ca4:	cf 90       	pop	r12
 ca6:	bf 90       	pop	r11
 ca8:	08 95       	ret

00000caa <lcdprint>:
	return length;
}



void lcdprint(char *str){
 caa:	cf 93       	push	r28
 cac:	df 93       	push	r29
 cae:	ec 01       	movw	r28, r24
	setbit(lcdControl, lcdRS);
 cb0:	c5 9a       	sbi	0x18, 5	; 24
	for( int i=0; str[i]!='\0'; i++){
 cb2:	88 81       	ld	r24, Y
 cb4:	88 23       	and	r24, r24
 cb6:	59 f0       	breq	.+22     	; 0xcce <lcdprint+0x24>
	return length;
}



void lcdprint(char *str){
 cb8:	21 96       	adiw	r28, 0x01	; 1
	setbit(lcdControl, lcdRS);
	for( int i=0; str[i]!='\0'; i++){
		lcdWrite(str[i]);
 cba:	65 df       	rcall	.-310    	; 0xb86 <lcdWrite>
 cbc:	87 ec       	ldi	r24, 0xC7	; 199
 cbe:	90 e0       	ldi	r25, 0x00	; 0
 cc0:	01 97       	sbiw	r24, 0x01	; 1
 cc2:	f1 f7       	brne	.-4      	; 0xcc0 <lcdprint+0x16>
 cc4:	00 c0       	rjmp	.+0      	; 0xcc6 <lcdprint+0x1c>
 cc6:	00 00       	nop



void lcdprint(char *str){
	setbit(lcdControl, lcdRS);
	for( int i=0; str[i]!='\0'; i++){
 cc8:	89 91       	ld	r24, Y+
 cca:	81 11       	cpse	r24, r1
 ccc:	f6 cf       	rjmp	.-20     	; 0xcba <lcdprint+0x10>
		lcdWrite(str[i]);
		_delay_us(50);
	}
	clearbit(lcdControl, lcdRS);
 cce:	c5 98       	cbi	0x18, 5	; 24
}
 cd0:	df 91       	pop	r29
 cd2:	cf 91       	pop	r28
 cd4:	08 95       	ret

00000cd6 <lcdprintchar>:



void lcdprintchar(char byte){
	setbit(lcdControl, lcdRS);
 cd6:	c5 9a       	sbi	0x18, 5	; 24
	lcdWrite(byte);
 cd8:	56 df       	rcall	.-340    	; 0xb86 <lcdWrite>
 cda:	87 ec       	ldi	r24, 0xC7	; 199
 cdc:	90 e0       	ldi	r25, 0x00	; 0
 cde:	01 97       	sbiw	r24, 0x01	; 1
 ce0:	f1 f7       	brne	.-4      	; 0xcde <lcdprintchar+0x8>
 ce2:	00 c0       	rjmp	.+0      	; 0xce4 <lcdprintchar+0xe>
 ce4:	00 00       	nop
	_delay_us(50);
	clearbit(lcdControl, lcdRS);
 ce6:	c5 98       	cbi	0x18, 5	; 24
 ce8:	08 95       	ret

00000cea <lcdprintat>:
}

void lcdprintat( int line, int colun, char *str){
 cea:	cf 93       	push	r28
 cec:	df 93       	push	r29
 cee:	ea 01       	movw	r28, r20
	char position = line*0x40;
	position += colun;
 cf0:	90 e4       	ldi	r25, 0x40	; 64
 cf2:	89 9f       	mul	r24, r25
 cf4:	60 0d       	add	r22, r0
 cf6:	11 24       	eor	r1, r1
 cf8:	86 2f       	mov	r24, r22
	lcdWrite(0x80|position);
 cfa:	80 68       	ori	r24, 0x80	; 128
 cfc:	44 df       	rcall	.-376    	; 0xb86 <lcdWrite>
 cfe:	87 ec       	ldi	r24, 0xC7	; 199
 d00:	90 e0       	ldi	r25, 0x00	; 0
 d02:	01 97       	sbiw	r24, 0x01	; 1
 d04:	f1 f7       	brne	.-4      	; 0xd02 <lcdprintat+0x18>
 d06:	00 c0       	rjmp	.+0      	; 0xd08 <lcdprintat+0x1e>
 d08:	00 00       	nop
	_delay_us(50);
	lcdprint(str);
 d0a:	ce 01       	movw	r24, r28
 d0c:	ce df       	rcall	.-100    	; 0xcaa <lcdprint>
}
 d0e:	df 91       	pop	r29
 d10:	cf 91       	pop	r28
 d12:	08 95       	ret

00000d14 <lcdClean>:
}



void lcdClean(){
	lcdWrite(0x01);		// Clean
 d14:	81 e0       	ldi	r24, 0x01	; 1
 d16:	37 df       	rcall	.-402    	; 0xb86 <lcdWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 d18:	8f e3       	ldi	r24, 0x3F	; 63
 d1a:	9f e1       	ldi	r25, 0x1F	; 31
 d1c:	01 97       	sbiw	r24, 0x01	; 1
 d1e:	f1 f7       	brne	.-4      	; 0xd1c <lcdClean+0x8>
 d20:	00 c0       	rjmp	.+0      	; 0xd22 <lcdClean+0xe>
 d22:	00 00       	nop
 d24:	08 95       	ret

00000d26 <lcdInit>:
 d26:	2f ef       	ldi	r18, 0xFF	; 255
 d28:	80 e7       	ldi	r24, 0x70	; 112
 d2a:	92 e0       	ldi	r25, 0x02	; 2
 d2c:	21 50       	subi	r18, 0x01	; 1
 d2e:	80 40       	sbci	r24, 0x00	; 0
 d30:	90 40       	sbci	r25, 0x00	; 0
 d32:	e1 f7       	brne	.-8      	; 0xd2c <lcdInit+0x6>
 d34:	00 c0       	rjmp	.+0      	; 0xd36 <lcdInit+0x10>
 d36:	00 00       	nop

void lcdInit(){

	_delay_ms(50);
	// init
	clearbit(lcdControl, lcdRS);
 d38:	c5 98       	cbi	0x18, 5	; 24
	clearbit(lcdControl, lcdE);
 d3a:	c4 98       	cbi	0x18, 4	; 24
	setbit(lcdControlD, lcdRS);
 d3c:	bd 9a       	sbi	0x17, 5	; 23
	setbit(lcdControlD, lcdE);
 d3e:	bc 9a       	sbi	0x17, 4	; 23
	setbit(lcdBusD, 0);
 d40:	b8 9a       	sbi	0x17, 0	; 23
	setbit(lcdBusD, 1);
 d42:	b9 9a       	sbi	0x17, 1	; 23
	setbit(lcdBusD, 2);
 d44:	ba 9a       	sbi	0x17, 2	; 23
	setbit(lcdBusD, 3);
 d46:	bb 9a       	sbi	0x17, 3	; 23
	
	
	lcdWrite(0x33);		// Display MODE
 d48:	83 e3       	ldi	r24, 0x33	; 51
 d4a:	1d df       	rcall	.-454    	; 0xb86 <lcdWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 d4c:	87 ec       	ldi	r24, 0xC7	; 199
 d4e:	90 e0       	ldi	r25, 0x00	; 0
 d50:	01 97       	sbiw	r24, 0x01	; 1
 d52:	f1 f7       	brne	.-4      	; 0xd50 <lcdInit+0x2a>
 d54:	00 c0       	rjmp	.+0      	; 0xd56 <lcdInit+0x30>
 d56:	00 00       	nop
	_delay_us(50);
	lcdWrite(0x33);
 d58:	83 e3       	ldi	r24, 0x33	; 51
 d5a:	15 df       	rcall	.-470    	; 0xb86 <lcdWrite>
 d5c:	87 ec       	ldi	r24, 0xC7	; 199
 d5e:	90 e0       	ldi	r25, 0x00	; 0
 d60:	01 97       	sbiw	r24, 0x01	; 1
 d62:	f1 f7       	brne	.-4      	; 0xd60 <lcdInit+0x3a>
 d64:	00 c0       	rjmp	.+0      	; 0xd66 <lcdInit+0x40>
 d66:	00 00       	nop
	_delay_us(50);
	
	lcdBus = lcdBus&0xF0;
 d68:	88 b3       	in	r24, 0x18	; 24
 d6a:	80 7f       	andi	r24, 0xF0	; 240
 d6c:	88 bb       	out	0x18, r24	; 24
	lcdBus |= (0x2);
 d6e:	c1 9a       	sbi	0x18, 1	; 24
	setbit(lcdControl, lcdE);
 d70:	c4 9a       	sbi	0x18, 4	; 24
 d72:	95 e0       	ldi	r25, 0x05	; 5
 d74:	9a 95       	dec	r25
 d76:	f1 f7       	brne	.-4      	; 0xd74 <lcdInit+0x4e>
 d78:	00 00       	nop
	_delay_us(1);
	clearbit(lcdControl, lcdE);
 d7a:	c4 98       	cbi	0x18, 4	; 24
 d7c:	87 ec       	ldi	r24, 0xC7	; 199
 d7e:	90 e0       	ldi	r25, 0x00	; 0
 d80:	01 97       	sbiw	r24, 0x01	; 1
 d82:	f1 f7       	brne	.-4      	; 0xd80 <lcdInit+0x5a>
 d84:	00 c0       	rjmp	.+0      	; 0xd86 <lcdInit+0x60>
 d86:	00 00       	nop
	
	_delay_us(50);
	lcdWrite(0x28);		// Display MODE
 d88:	88 e2       	ldi	r24, 0x28	; 40
 d8a:	fd de       	rcall	.-518    	; 0xb86 <lcdWrite>
 d8c:	87 ec       	ldi	r24, 0xC7	; 199
 d8e:	90 e0       	ldi	r25, 0x00	; 0
 d90:	01 97       	sbiw	r24, 0x01	; 1
 d92:	f1 f7       	brne	.-4      	; 0xd90 <lcdInit+0x6a>
 d94:	00 c0       	rjmp	.+0      	; 0xd96 <lcdInit+0x70>
 d96:	00 00       	nop
	_delay_us(50);
	lcdWrite(0x0C);		// Display On/Off
 d98:	8c e0       	ldi	r24, 0x0C	; 12
 d9a:	f5 de       	rcall	.-534    	; 0xb86 <lcdWrite>
 d9c:	87 ec       	ldi	r24, 0xC7	; 199
 d9e:	90 e0       	ldi	r25, 0x00	; 0
 da0:	01 97       	sbiw	r24, 0x01	; 1
 da2:	f1 f7       	brne	.-4      	; 0xda0 <lcdInit+0x7a>
 da4:	00 c0       	rjmp	.+0      	; 0xda6 <lcdInit+0x80>
 da6:	00 00       	nop
	_delay_us(50);
	
	lcdClean();
 da8:	b5 df       	rcall	.-150    	; 0xd14 <lcdClean>
 daa:	08 95       	ret

00000dac <UART_init>:
 *  Author: Renan
 */ 

#include "UART.h"

void UART_init( unsigned long BAUD ){
 dac:	9b 01       	movw	r18, r22
 dae:	ac 01       	movw	r20, r24
	unsigned long ubrr;
	
	UCSRA = 0x02;
 db0:	82 e0       	ldi	r24, 0x02	; 2
 db2:	8b b9       	out	0x0b, r24	; 11
	UCSRB = (1<<TXEN) | (1<<RXEN);
 db4:	88 e1       	ldi	r24, 0x18	; 24
 db6:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (3<<UCSZ0);
 db8:	86 e0       	ldi	r24, 0x06	; 6
 dba:	80 bd       	out	0x20, r24	; 32
	
	ubrr = ((F_CPU/8)/BAUD)-1;
 dbc:	60 e8       	ldi	r22, 0x80	; 128
 dbe:	74 e8       	ldi	r23, 0x84	; 132
 dc0:	8e e1       	ldi	r24, 0x1E	; 30
 dc2:	90 e0       	ldi	r25, 0x00	; 0
 dc4:	10 d0       	rcall	.+32     	; 0xde6 <__udivmodsi4>
 dc6:	da 01       	movw	r26, r20
 dc8:	c9 01       	movw	r24, r18
 dca:	01 97       	sbiw	r24, 0x01	; 1
 dcc:	a1 09       	sbc	r26, r1
 dce:	b1 09       	sbc	r27, r1
	UBRRH = (unsigned char) (ubrr>>8);
 dd0:	49 2f       	mov	r20, r25
 dd2:	5a 2f       	mov	r21, r26
 dd4:	6b 2f       	mov	r22, r27
 dd6:	77 27       	eor	r23, r23
 dd8:	40 bd       	out	0x20, r20	; 32
	UBRRL = (unsigned char) (ubrr);
 dda:	89 b9       	out	0x09, r24	; 9
 ddc:	08 95       	ret

00000dde <UART_Write>:
}

void UART_Write( unsigned char Data ){
	while( !(UCSRA & (1<<UDRE)) );
 dde:	5d 9b       	sbis	0x0b, 5	; 11
 de0:	fe cf       	rjmp	.-4      	; 0xdde <UART_Write>
	UDR = Data;
 de2:	8c b9       	out	0x0c, r24	; 12
 de4:	08 95       	ret

00000de6 <__udivmodsi4>:
 de6:	a1 e2       	ldi	r26, 0x21	; 33
 de8:	1a 2e       	mov	r1, r26
 dea:	aa 1b       	sub	r26, r26
 dec:	bb 1b       	sub	r27, r27
 dee:	fd 01       	movw	r30, r26
 df0:	0d c0       	rjmp	.+26     	; 0xe0c <__udivmodsi4_ep>

00000df2 <__udivmodsi4_loop>:
 df2:	aa 1f       	adc	r26, r26
 df4:	bb 1f       	adc	r27, r27
 df6:	ee 1f       	adc	r30, r30
 df8:	ff 1f       	adc	r31, r31
 dfa:	a2 17       	cp	r26, r18
 dfc:	b3 07       	cpc	r27, r19
 dfe:	e4 07       	cpc	r30, r20
 e00:	f5 07       	cpc	r31, r21
 e02:	20 f0       	brcs	.+8      	; 0xe0c <__udivmodsi4_ep>
 e04:	a2 1b       	sub	r26, r18
 e06:	b3 0b       	sbc	r27, r19
 e08:	e4 0b       	sbc	r30, r20
 e0a:	f5 0b       	sbc	r31, r21

00000e0c <__udivmodsi4_ep>:
 e0c:	66 1f       	adc	r22, r22
 e0e:	77 1f       	adc	r23, r23
 e10:	88 1f       	adc	r24, r24
 e12:	99 1f       	adc	r25, r25
 e14:	1a 94       	dec	r1
 e16:	69 f7       	brne	.-38     	; 0xdf2 <__udivmodsi4_loop>
 e18:	60 95       	com	r22
 e1a:	70 95       	com	r23
 e1c:	80 95       	com	r24
 e1e:	90 95       	com	r25
 e20:	9b 01       	movw	r18, r22
 e22:	ac 01       	movw	r20, r24
 e24:	bd 01       	movw	r22, r26
 e26:	cf 01       	movw	r24, r30
 e28:	08 95       	ret

00000e2a <__eerd_byte_m8>:
 e2a:	e1 99       	sbic	0x1c, 1	; 28
 e2c:	fe cf       	rjmp	.-4      	; 0xe2a <__eerd_byte_m8>
 e2e:	9f bb       	out	0x1f, r25	; 31
 e30:	8e bb       	out	0x1e, r24	; 30
 e32:	e0 9a       	sbi	0x1c, 0	; 28
 e34:	99 27       	eor	r25, r25
 e36:	8d b3       	in	r24, 0x1d	; 29
 e38:	08 95       	ret

00000e3a <__eerd_word_m8>:
 e3a:	a8 e1       	ldi	r26, 0x18	; 24
 e3c:	b0 e0       	ldi	r27, 0x00	; 0
 e3e:	42 e0       	ldi	r20, 0x02	; 2
 e40:	50 e0       	ldi	r21, 0x00	; 0
 e42:	12 c0       	rjmp	.+36     	; 0xe68 <__eerd_blraw_m8>

00000e44 <__eewr_byte_m8>:
 e44:	26 2f       	mov	r18, r22

00000e46 <__eewr_r18_m8>:
 e46:	e1 99       	sbic	0x1c, 1	; 28
 e48:	fe cf       	rjmp	.-4      	; 0xe46 <__eewr_r18_m8>
 e4a:	9f bb       	out	0x1f, r25	; 31
 e4c:	8e bb       	out	0x1e, r24	; 30
 e4e:	2d bb       	out	0x1d, r18	; 29
 e50:	0f b6       	in	r0, 0x3f	; 63
 e52:	f8 94       	cli
 e54:	e2 9a       	sbi	0x1c, 2	; 28
 e56:	e1 9a       	sbi	0x1c, 1	; 28
 e58:	0f be       	out	0x3f, r0	; 63
 e5a:	01 96       	adiw	r24, 0x01	; 1
 e5c:	08 95       	ret

00000e5e <__eewr_word_m8>:
 e5e:	f2 df       	rcall	.-28     	; 0xe44 <__eewr_byte_m8>
 e60:	27 2f       	mov	r18, r23
 e62:	f1 cf       	rjmp	.-30     	; 0xe46 <__eewr_r18_m8>

00000e64 <__eerd_block_m8>:
 e64:	dc 01       	movw	r26, r24
 e66:	cb 01       	movw	r24, r22

00000e68 <__eerd_blraw_m8>:
 e68:	fc 01       	movw	r30, r24
 e6a:	e1 99       	sbic	0x1c, 1	; 28
 e6c:	fe cf       	rjmp	.-4      	; 0xe6a <__eerd_blraw_m8+0x2>
 e6e:	06 c0       	rjmp	.+12     	; 0xe7c <__eerd_blraw_m8+0x14>
 e70:	ff bb       	out	0x1f, r31	; 31
 e72:	ee bb       	out	0x1e, r30	; 30
 e74:	e0 9a       	sbi	0x1c, 0	; 28
 e76:	31 96       	adiw	r30, 0x01	; 1
 e78:	0d b2       	in	r0, 0x1d	; 29
 e7a:	0d 92       	st	X+, r0
 e7c:	41 50       	subi	r20, 0x01	; 1
 e7e:	50 40       	sbci	r21, 0x00	; 0
 e80:	b8 f7       	brcc	.-18     	; 0xe70 <__eerd_blraw_m8+0x8>
 e82:	08 95       	ret

00000e84 <_exit>:
 e84:	f8 94       	cli

00000e86 <__stop_program>:
 e86:	ff cf       	rjmp	.-2      	; 0xe86 <__stop_program>
